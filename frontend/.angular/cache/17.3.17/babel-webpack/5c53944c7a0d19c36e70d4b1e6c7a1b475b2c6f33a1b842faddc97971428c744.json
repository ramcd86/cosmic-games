{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/game-api.service\";\nimport * as i3 from \"../../services/socket.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction GameRoomComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1, \" Waiting for all players to be ready... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.currentPlayerName, \"'s turn \");\n  }\n}\nfunction GameRoomComponent_div_20_div_2_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r2 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \\uD83E\\uDD16 AI Player (\", slot_r2.player.difficulty, \") \");\n  }\n}\nfunction GameRoomComponent_div_20_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 40);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 41);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, GameRoomComponent_div_20_div_2_div_1_div_5_Template, 2, 1, \"div\", 42);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerNameClass(slot_r2));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", slot_r2.player.name, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(slot_r2.player.isReady ? \"text-green-400\" : \"text-yellow-400\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", slot_r2.player.isReady ? \"\\u2713 Ready\" : \"\\u23F3 Not Ready\", \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", slot_r2.player.isAI);\n  }\n}\nfunction GameRoomComponent_div_20_div_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 44)(1, \"div\", 45);\n    i0.ɵɵtext(2, \"\\uD83D\\uDC64\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 41);\n    i0.ɵɵtext(4, \"Empty Slot\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction GameRoomComponent_div_20_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38);\n    i0.ɵɵtemplate(1, GameRoomComponent_div_20_div_2_div_1_Template, 6, 6, \"div\", 39)(2, GameRoomComponent_div_20_div_2_ng_template_2_Template, 5, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r2 = ctx.$implicit;\n    const emptySlot_r3 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerFrameClass(slot_r2));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", slot_r2.player)(\"ngIfElse\", emptySlot_r3);\n  }\n}\nfunction GameRoomComponent_div_20_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 46);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.toggleReady());\n    });\n    i0.ɵɵtext(1, \" Ready Up \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.toggleReady());\n    });\n    i0.ɵɵtext(1, \" Not Ready \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.startGame());\n    });\n    i0.ɵɵtext(1, \" Start Game \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32);\n    i0.ɵɵtemplate(2, GameRoomComponent_div_20_div_2_Template, 4, 3, \"div\", 33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 34);\n    i0.ɵɵtemplate(4, GameRoomComponent_div_20_button_4_Template, 2, 0, \"button\", 35)(5, GameRoomComponent_div_20_button_5_Template, 2, 0, \"button\", 36)(6, GameRoomComponent_div_20_button_6_Template, 2, 0, \"button\", 37);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.playerSlots);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isPlayerReady);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isPlayerReady);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isHost && ctx_r0.canStartGame);\n  }\n}\nfunction GameRoomComponent_div_21_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"div\", 67);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const player_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerPositionClass(i_r8, ctx_r0.players.length));\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.getPlayerBackgroundColor(player_r7.name));\n    i0.ɵɵproperty(\"ngClass\", player_r7.id === ctx_r0.currentPlayerId ? \"active-turn\" : \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.generatePlayerInitials(player_r7.name, ctx_r0.players), \" \");\n  }\n}\nfunction GameRoomComponent_div_21_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 68);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 69);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardRank(ctx_r0.discardPile[ctx_r0.discardPile.length - 1]), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardSuit(ctx_r0.discardPile[ctx_r0.discardPile.length - 1]), \" \");\n  }\n}\nfunction GameRoomComponent_div_21_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 70);\n    i0.ɵɵtext(1, \"Empty\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_21_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 71)(1, \"div\", 68);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 69);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const card_r9 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getCardColor(card_r9) === \"red\" ? \"card-red\" : \"card-black\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardRank(card_r9), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardSuit(card_r9), \" \");\n  }\n}\nfunction GameRoomComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 49)(2, \"div\", 50);\n    i0.ɵɵtemplate(3, GameRoomComponent_div_21_div_3_Template, 3, 5, \"div\", 51);\n    i0.ɵɵelementStart(4, \"div\", 52)(5, \"div\", 53)(6, \"div\", 31)(7, \"div\", 54)(8, \"span\", 55);\n    i0.ɵɵtext(9, \"\\uD83C\\uDCA0\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"p\", 56);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 31)(13, \"div\", 57);\n    i0.ɵɵtemplate(14, GameRoomComponent_div_21_div_14_Template, 5, 2, \"div\", 58)(15, GameRoomComponent_div_21_span_15_Template, 2, 0, \"span\", 59);\n    i0.ɵɵelementEnd()()()()()();\n    i0.ɵɵelementStart(16, \"div\", 60);\n    i0.ɵɵtemplate(17, GameRoomComponent_div_21_div_17_Template, 5, 3, \"div\", 61);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 62)(19, \"button\", 63);\n    i0.ɵɵtext(20, \"Draw\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 64);\n    i0.ɵɵtext(22, \"Knock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 65);\n    i0.ɵɵtext(24, \"Gin\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.players);\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate(ctx_r0.deckCount);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.discardPile.length > 0 ? ctx_r0.getCardColor(ctx_r0.discardPile[ctx_r0.discardPile.length - 1]) === \"red\" ? \"card-red\" : \"card-black\" : \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.discardPile.length > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.discardPile.length === 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.myCards);\n  }\n}\nfunction GameRoomComponent_div_27_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 79);\n    i0.ɵɵtext(1, \"\\uD83D\\uDC51\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 80);\n    i0.ɵɵtext(1, \"\\uD83E\\uDD16\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const player_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" | \", player_r10.difficulty, \"\");\n  }\n}\nfunction GameRoomComponent_div_27_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 81);\n    i0.ɵɵtext(1, \"\\u25CF\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 82);\n    i0.ɵɵtext(1, \"\\u25CF\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72)(1, \"div\")(2, \"div\", 73);\n    i0.ɵɵtext(3);\n    i0.ɵɵtemplate(4, GameRoomComponent_div_27_span_4_Template, 2, 0, \"span\", 74)(5, GameRoomComponent_div_27_span_5_Template, 2, 0, \"span\", 75);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 76);\n    i0.ɵɵtext(7);\n    i0.ɵɵtemplate(8, GameRoomComponent_div_27_span_8_Template, 2, 1, \"span\", 58);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 41);\n    i0.ɵɵtemplate(10, GameRoomComponent_div_27_span_10_Template, 2, 0, \"span\", 77)(11, GameRoomComponent_div_27_span_11_Template, 2, 0, \"span\", 78);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const player_r10 = ctx.$implicit;\n    const i_r11 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(player_r10.id === ctx_r0.currentPlayerId ? \"bg-casino-gold/20\" : \"\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerColorTheme(i_r11).frame);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerColorTheme(i_r11).name);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", player_r10.name, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", player_r10.id === ctx_r0.hostId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", player_r10.isAI);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Score: \", player_r10.score, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", player_r10.isAI);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", player_r10.isConnected);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !player_r10.isConnected);\n  }\n}\nfunction GameRoomComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41)(1, \"span\", 83);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 84);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r12 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", message_r12.playerName, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r12.text);\n  }\n}\nexport let GameRoomComponent = /*#__PURE__*/(() => {\n  class GameRoomComponent {\n    constructor(route, router, gameApiService, socketService) {\n      this.route = route;\n      this.router = router;\n      this.gameApiService = gameApiService;\n      this.socketService = socketService;\n      this.roomCode = '';\n      this.roomName = 'Cosmic Game Room';\n      this.gamePhase = 'waiting';\n      this.isReconnecting = false;\n      // Real game data\n      this.currentRoom = null;\n      this.players = [];\n      // Game state\n      this.myCards = [];\n      this.opponentCards = 0;\n      this.discardPile = [];\n      this.deckCount = 0;\n      // Subscriptions\n      this.subscriptions = [];\n      this.playerSlots = [];\n      this.currentPlayerId = '';\n      this.currentPlayerName = '';\n      this.hostId = '';\n      this.isHost = false;\n      this.isPlayerReady = false;\n      this.canStartGame = false;\n      this.myPlayerId = ''; // Track which player this client represents  \n      this.myPlayerName = ''; // Track this client's player name\n      // Player color themes for visual differentiation\n      this.playerColors = [{\n        frame: 'player-frame-red',\n        name: 'player-name-red'\n      }, {\n        frame: 'player-frame-blue',\n        name: 'player-name-blue'\n      }, {\n        frame: 'player-frame-green',\n        name: 'player-name-green'\n      }, {\n        frame: 'player-frame-purple',\n        name: 'player-name-purple'\n      }, {\n        frame: 'player-frame-orange',\n        name: 'player-name-orange'\n      }, {\n        frame: 'player-frame-pink',\n        name: 'player-name-pink'\n      }, {\n        frame: 'player-frame-yellow',\n        name: 'player-name-yellow'\n      }, {\n        frame: 'player-frame-cyan',\n        name: 'player-name-cyan'\n      }];\n      // Room settings\n      this.maxPlayers = 6;\n      this.gameVariant = 'classic';\n      this.turnTimeLimit = 30;\n      this.pointLimit = 100;\n      // Chat\n      this.chatMessages = [];\n      this.chatInput = '';\n    }\n    ngOnInit() {\n      this.roomCode = this.route.snapshot.params['code'];\n      console.log('Joining room:', this.roomCode);\n      // Check if this is a reconnection\n      const storedRoomCode = localStorage.getItem('activeRoomCode');\n      this.isReconnecting = storedRoomCode === this.roomCode;\n      if (this.isReconnecting) {\n        console.log('🔄 Reconnecting to existing session...');\n      }\n      // Get player name from localStorage (should be set when joining/creating room)\n      this.myPlayerName = localStorage.getItem('currentPlayerName') || 'Player';\n      // Connect to WebSocket\n      this.socketService.connect();\n      // Subscribe to real-time updates\n      this.setupSocketSubscriptions();\n      // Join the room via socket (important for session tracking)\n      this.socketService.joinRoom(this.roomCode, this.myPlayerName);\n      // Load room data\n      this.loadRoomData();\n    }\n    ngOnDestroy() {\n      // Cleanup subscriptions\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n      // Leave room and disconnect socket\n      if (this.roomCode) {\n        this.socketService.leaveRoom(this.roomCode);\n      }\n      this.socketService.disconnect();\n      // Don't clear session here as user might want to rejoin\n      // Session will be cleared when they start a new game or manually clear it\n    }\n    setupSocketSubscriptions() {\n      // Room updates\n      this.subscriptions.push(this.socketService.roomUpdated$.subscribe(room => {\n        if (room) {\n          this.updateRoomData(room);\n          this.updateSessionActivity(); // Keep session fresh\n        }\n      }));\n      // Game updates\n      this.subscriptions.push(this.socketService.gameUpdated$.subscribe(gameState => {\n        if (gameState && this.currentRoom) {\n          this.currentRoom.gameState = gameState;\n          this.gamePhase = gameState.phase;\n        }\n      }));\n      // Player joined\n      this.subscriptions.push(this.socketService.playerJoined$.subscribe(player => {\n        if (player && this.currentRoom) {\n          // Player already added via room update, just show notification\n          this.addChatMessage('System', `${player.name} joined the room`);\n        }\n      }));\n      // Player left\n      this.subscriptions.push(this.socketService.playerLeft$.subscribe(playerId => {\n        if (playerId && this.currentRoom) {\n          const player = this.currentRoom.players.find(p => p.id === playerId);\n          if (player) {\n            this.addChatMessage('System', `${player.name} left the room`);\n          }\n        }\n      }));\n      // Chat messages\n      this.subscriptions.push(this.socketService.chatReceived$.subscribe(chat => {\n        if (chat) {\n          this.addChatMessage(chat.playerName, chat.message);\n        }\n      }));\n      // Errors\n      this.subscriptions.push(this.socketService.error$.subscribe(error => {\n        if (error) {\n          console.error('Socket error:', error);\n          this.addChatMessage('System', `Error: ${error}`);\n        }\n      }));\n      // Game started\n      this.subscriptions.push(this.socketService.gameStarted$.subscribe(started => {\n        if (started) {\n          this.gamePhase = 'playing';\n          this.addChatMessage('System', 'Game started!');\n        }\n      }));\n    }\n    loadRoomData() {\n      this.gameApiService.getRoom(this.roomCode).subscribe({\n        next: response => {\n          if (response.success && response.data) {\n            this.updateRoomData(response.data);\n          } else {\n            console.error('Failed to load room:', response.error);\n            this.router.navigate(['/']);\n          }\n        },\n        error: error => {\n          console.error('Error loading room:', error);\n          this.router.navigate(['/']);\n        }\n      });\n    }\n    updateRoomData(room) {\n      this.currentRoom = room;\n      this.roomName = room.name;\n      this.players = room.players;\n      this.hostId = room.hostId;\n      this.gamePhase = room.gameState.phase;\n      this.maxPlayers = room.settings.maxPlayers;\n      this.gameVariant = room.settings.gameVariant;\n      this.turnTimeLimit = room.settings.turnTimeLimit;\n      this.pointLimit = room.settings.pointLimit;\n      // Find current player by name\n      const myPlayer = this.players.find(p => p.name === this.myPlayerName);\n      if (myPlayer) {\n        this.myPlayerId = myPlayer.id;\n        this.isPlayerReady = myPlayer.isReady;\n      }\n      // Update player slots\n      this.playerSlots = Array(this.maxPlayers).fill(null).map((_, i) => ({\n        index: i,\n        player: i < this.players.length ? this.players[i] : null\n      }));\n      // Determine if current user is host\n      this.isHost = this.hostId === this.myPlayerId;\n      // Check if can start game\n      this.canStartGame = this.isHost && this.players.length >= 2 && this.players.every(p => p.isReady) && this.gamePhase === 'waiting';\n      // Update current player info for game state\n      if (room.gameState.currentPlayer) {\n        const currentPlayer = this.players.find(p => p.id === room.gameState.currentPlayer);\n        this.currentPlayerName = currentPlayer?.name || '';\n      }\n      // Update game data for display\n      if (this.gamePhase === 'playing') {\n        // Get my cards\n        const myPlayer = this.players.find(p => p.id === this.myPlayerId);\n        this.myCards = myPlayer?.cards || [];\n        // Count opponent cards (for display purposes)\n        const opponents = this.players.filter(p => p.id !== this.myPlayerId);\n        this.opponentCards = opponents.length > 0 ? opponents[0].cards.length : 0;\n        // Game state data\n        this.discardPile = room.gameState.discardPile || [];\n        this.deckCount = room.gameState.deck?.length || 0;\n      }\n      console.log('Room updated. My player:', {\n        id: this.myPlayerId,\n        name: this.myPlayerName,\n        ready: this.isPlayerReady\n      });\n    }\n    addChatMessage(playerName, text) {\n      this.chatMessages.push({\n        playerName,\n        text,\n        timestamp: new Date()\n      });\n    }\n    /**\n     * Get color theme for a player based on their index\n     */\n    getPlayerColorTheme(playerIndex) {\n      return this.playerColors[playerIndex % this.playerColors.length];\n    }\n    /**\n     * Get frame class for a player slot\n     */\n    getPlayerFrameClass(slot) {\n      if (!slot.player) return '';\n      const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\n      const theme = this.getPlayerColorTheme(playerIndex);\n      return theme.frame;\n    }\n    /**\n     * Get name class for a player slot\n     */\n    getPlayerNameClass(slot) {\n      if (!slot.player) return 'text-casino-gold';\n      const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\n      const theme = this.getPlayerColorTheme(playerIndex);\n      return theme.name;\n    }\n    toggleReady() {\n      // Don't optimistically update - wait for server confirmation\n      this.socketService.togglePlayerReady(this.roomCode);\n      console.log('Requesting ready status toggle...');\n    }\n    startGame() {\n      if (!this.canStartGame) return;\n      this.socketService.startGame(this.roomCode);\n      console.log('Starting game...');\n    }\n    sendChatMessage() {\n      if (!this.chatInput.trim()) return;\n      this.socketService.sendChatMessage(this.roomCode, this.chatInput.trim());\n      this.chatInput = '';\n    }\n    leaveRoom() {\n      if (confirm('Are you sure you want to leave the room?')) {\n        this.socketService.leaveRoom(this.roomCode);\n        this.router.navigate(['/']);\n      }\n    }\n    /**\n     * Get display string for a card\n     */\n    getCardDisplay(card) {\n      if (!card) return '';\n      // Card suit symbols\n      const suitSymbols = {\n        'hearts': '♥',\n        'diamonds': '♦',\n        'clubs': '♣',\n        'spades': '♠'\n      };\n      const suit = suitSymbols[card.suit] || card.suit;\n      return `${card.rank}${suit}`;\n    }\n    getCardRank(card) {\n      return card?.rank || '';\n    }\n    getCardSuit(card) {\n      const suitSymbols = {\n        'hearts': '♥',\n        'diamonds': '♦',\n        'clubs': '♣',\n        'spades': '♠'\n      };\n      return suitSymbols[card?.suit] || card?.suit || '';\n    }\n    getCardColor(card) {\n      if (!card) return 'black';\n      return card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black';\n    }\n    updateSessionActivity() {\n      // Update session timestamp to keep it fresh\n      const currentRoomCode = localStorage.getItem('activeRoomCode');\n      if (currentRoomCode === this.roomCode) {\n        localStorage.setItem('sessionTimestamp', Date.now().toString());\n        // Store room composition info for smarter timeout calculation\n        if (this.currentRoom) {\n          const humanPlayers = this.currentRoom.players.filter(p => !p.isAI);\n          const isAIOnly = humanPlayers.length <= 1; // Only this player or less\n          localStorage.setItem('sessionIsAIOnly', isAIOnly.toString());\n        }\n      }\n    }\n    generatePlayerInitials(name, allPlayers) {\n      // Get all other player names for collision detection\n      const otherNames = allPlayers.filter(p => p.name !== name).map(p => p.name);\n      // Start with first character\n      let initials = name.charAt(0).toUpperCase();\n      // Check if any other player starts with the same character\n      const sameFirstChar = otherNames.some(otherName => otherName.charAt(0).toUpperCase() === initials);\n      // If collision, add second character\n      if (sameFirstChar && name.length > 1) {\n        initials += name.charAt(1).toUpperCase();\n      }\n      return initials;\n    }\n    getPlayerPositionClass(index, totalPlayers) {\n      const positions = ['player-bottom',\n      // Current player always at bottom\n      'player-top',\n      // Second player at top\n      'player-right',\n      // Third player at right\n      'player-left',\n      // Fourth player at left\n      'player-top-right',\n      // Fifth player at top-right\n      'player-top-left',\n      // Sixth player at top-left\n      'player-bottom-right',\n      // Seventh player at bottom-right\n      'player-bottom-left' // Eighth player at bottom-left\n      ];\n      return positions[index] || 'player-top';\n    }\n    getPlayerBackgroundColor(playerName) {\n      // Generate consistent color based on player name\n      let hash = 0;\n      for (let i = 0; i < playerName.length; i++) {\n        hash = playerName.charCodeAt(i) + ((hash << 5) - hash);\n      }\n      // Create HSL color with good saturation and lightness for visibility\n      const hue = Math.abs(hash) % 360;\n      return `hsl(${hue}, 65%, 50%)`;\n    }\n    static {\n      this.ɵfac = function GameRoomComponent_Factory(t) {\n        return new (t || GameRoomComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.GameApiService), i0.ɵɵdirectiveInject(i3.SocketService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: GameRoomComponent,\n        selectors: [[\"app-game-room\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 61,\n        vars: 15,\n        consts: [[\"emptySlot\", \"\"], [1, \"max-w-6xl\", \"mx-auto\"], [1, \"casino-panel\", \"mb-6\"], [1, \"flex\", \"justify-between\", \"items-center\"], [1, \"text-2xl\", \"font-bold\", \"text-gold\"], [1, \"text-casino-silver\"], [1, \"font-mono\", \"text-casino-gold\"], [1, \"bg-red-600\", \"hover:bg-red-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\", \"transition-colors\", 3, \"click\"], [1, \"grid\", \"lg:grid-cols-4\", \"gap-6\"], [1, \"lg:col-span-3\"], [1, \"casino-table\", \"p-8\", \"mb-6\"], [1, \"text-center\", \"mb-8\"], [1, \"text-3xl\", \"font-bold\", \"text-casino-silver\", \"mb-2\"], [\"class\", \"text-casino-silver/80\", 4, \"ngIf\"], [\"class\", \"text-casino-gold\", 4, \"ngIf\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"class\", \"space-y-6\", 4, \"ngIf\"], [1, \"space-y-6\"], [1, \"casino-panel\"], [1, \"text-lg\", \"font-bold\", \"text-casino-gold\", \"mb-4\"], [1, \"space-y-2\"], [\"class\", \"flex justify-between items-center p-2 rounded transition-all duration-300\", 3, \"class\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"space-y-2\", \"max-h-40\", \"overflow-y-auto\", \"mb-4\"], [\"class\", \"text-sm\", 4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"gap-2\", 3, \"ngSubmit\"], [\"name\", \"chatInput\", \"type\", \"text\", \"placeholder\", \"Type a message...\", \"maxlength\", \"100\", 1, \"casino-input\", \"flex-1\", \"text-sm\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\", 1, \"bg-casino-gold\", \"text-casino-black\", \"px-3\", \"py-1\", \"rounded\", \"text-sm\", \"hover:bg-casino-bronze\", \"transition-colors\", 3, \"disabled\"], [1, \"space-y-2\", \"text-sm\"], [1, \"flex\", \"justify-between\"], [1, \"text-casino-gold\"], [1, \"text-casino-silver/80\"], [1, \"text-center\"], [1, \"grid\", \"grid-cols-2\", \"md:grid-cols-3\", \"gap-4\", \"max-w-md\", \"mx-auto\"], [\"class\", \"casino-panel p-4 text-center min-h-[100px] flex flex-col justify-center transition-all duration-300\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-8\", \"space-y-4\"], [\"class\", \"casino-button mr-4\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg mr-4\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"casino-button\", 3, \"click\", 4, \"ngIf\"], [1, \"casino-panel\", \"p-4\", \"text-center\", \"min-h-[100px]\", \"flex\", \"flex-col\", \"justify-center\", \"transition-all\", \"duration-300\", 3, \"ngClass\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"text-lg\", \"font-bold\", \"transition-colors\", \"duration-300\", 3, \"ngClass\"], [1, \"text-sm\"], [\"class\", \"text-xs text-casino-silver/60\", 4, \"ngIf\"], [1, \"text-xs\", \"text-casino-silver/60\"], [1, \"text-casino-silver/50\"], [1, \"text-2xl\", \"mb-2\"], [1, \"casino-button\", \"mr-4\", 3, \"click\"], [1, \"bg-yellow-600\", \"hover:bg-yellow-700\", \"text-white\", \"px-6\", \"py-3\", \"rounded-lg\", \"mr-4\", 3, \"click\"], [1, \"casino-button\", 3, \"click\"], [1, \"table-container\"], [1, \"players-around-table\"], [\"class\", \"player-position\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"game-table\"], [1, \"flex\", \"justify-center\", \"space-x-8\"], [1, \"w-16\", \"h-24\", \"bg-casino-charcoal\", \"rounded\", \"border-2\", \"border-casino-gold\", \"cursor-pointer\", \"hover:scale-105\", \"transition-transform\", \"flex\", \"items-center\", \"justify-center\"], [1, \"text-casino-gold\", \"text-sm\"], [1, \"text-white\", \"text-xs\", \"mt-1\"], [1, \"discard-card\", \"card-style\", \"cursor-pointer\", \"hover:scale-105\", \"transition-transform\", 3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"absolute inset-0 flex items-center justify-center text-gray-400 text-xs\", 4, \"ngIf\"], [1, \"flex\", \"justify-center\", \"space-x-1\"], [\"class\", \"hand-card card-style cursor-pointer hover:scale-105 hover:-translate-y-2 transition-all\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-center\", \"space-x-4\"], [1, \"casino-button\"], [1, \"bg-yellow-600\", \"hover:bg-yellow-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\"], [1, \"bg-green-600\", \"hover:bg-green-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\"], [1, \"player-position\", 3, \"ngClass\"], [1, \"player-circle\", 3, \"ngClass\"], [1, \"card-rank\"], [1, \"card-suit\"], [1, \"absolute\", \"inset-0\", \"flex\", \"items-center\", \"justify-center\", \"text-gray-400\", \"text-xs\"], [1, \"hand-card\", \"card-style\", \"cursor-pointer\", \"hover:scale-105\", \"hover:-translate-y-2\", \"transition-all\", 3, \"ngClass\"], [1, \"flex\", \"justify-between\", \"items-center\", \"p-2\", \"rounded\", \"transition-all\", \"duration-300\", 3, \"ngClass\"], [1, \"font-medium\", \"transition-colors\", \"duration-300\", 3, \"ngClass\"], [\"class\", \"text-casino-gold text-xs\", 4, \"ngIf\"], [\"class\", \"text-xs\", 4, \"ngIf\"], [1, \"text-sm\", \"text-casino-silver/60\"], [\"class\", \"text-green-400\", 4, \"ngIf\"], [\"class\", \"text-red-400\", 4, \"ngIf\"], [1, \"text-casino-gold\", \"text-xs\"], [1, \"text-xs\"], [1, \"text-green-400\"], [1, \"text-red-400\"], [1, \"text-casino-gold\", \"font-medium\"], [1, \"text-casino-silver\", \"ml-1\"]],\n        template: function GameRoomComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\")(4, \"h1\", 4);\n            i0.ɵɵtext(5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"p\", 5);\n            i0.ɵɵtext(7, \"Room Code: \");\n            i0.ɵɵelementStart(8, \"span\", 6);\n            i0.ɵɵtext(9);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(10, \"button\", 7);\n            i0.ɵɵlistener(\"click\", function GameRoomComponent_Template_button_click_10_listener() {\n              return ctx.leaveRoom();\n            });\n            i0.ɵɵtext(11, \" Leave Room \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\", 9)(14, \"div\", 10)(15, \"div\", 11)(16, \"h2\", 12);\n            i0.ɵɵtext(17);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(18, GameRoomComponent_div_18_Template, 2, 0, \"div\", 13)(19, GameRoomComponent_div_19_Template, 2, 1, \"div\", 14);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(20, GameRoomComponent_div_20_Template, 7, 4, \"div\", 15)(21, GameRoomComponent_div_21_Template, 25, 6, \"div\", 16);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(22, \"div\", 17)(23, \"div\", 18)(24, \"h3\", 19);\n            i0.ɵɵtext(25, \"Players\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(26, \"div\", 20);\n            i0.ɵɵtemplate(27, GameRoomComponent_div_27_Template, 12, 11, \"div\", 21);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(28, \"div\", 18)(29, \"h3\", 19);\n            i0.ɵɵtext(30, \"Chat\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(31, \"div\", 22);\n            i0.ɵɵtemplate(32, GameRoomComponent_div_32_Template, 5, 2, \"div\", 23);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(33, \"form\", 24);\n            i0.ɵɵlistener(\"ngSubmit\", function GameRoomComponent_Template_form_ngSubmit_33_listener() {\n              return ctx.sendChatMessage();\n            });\n            i0.ɵɵelementStart(34, \"input\", 25);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function GameRoomComponent_Template_input_ngModelChange_34_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.chatInput, $event) || (ctx.chatInput = $event);\n              return $event;\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(35, \"button\", 26);\n            i0.ɵɵtext(36, \" Send \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(37, \"div\", 18)(38, \"h3\", 19);\n            i0.ɵɵtext(39, \"Settings\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(40, \"div\", 27)(41, \"div\", 28)(42, \"span\", 5);\n            i0.ɵɵtext(43, \"Max Players:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(44, \"span\", 29);\n            i0.ɵɵtext(45);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(46, \"div\", 28)(47, \"span\", 5);\n            i0.ɵɵtext(48, \"Game Variant:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(49, \"span\", 29);\n            i0.ɵɵtext(50);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(51, \"div\", 28)(52, \"span\", 5);\n            i0.ɵɵtext(53, \"Turn Limit:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(54, \"span\", 29);\n            i0.ɵɵtext(55);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(56, \"div\", 28)(57, \"span\", 5);\n            i0.ɵɵtext(58, \"Point Limit:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(59, \"span\", 29);\n            i0.ɵɵtext(60);\n            i0.ɵɵelementEnd()()()()()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(5);\n            i0.ɵɵtextInterpolate(ctx.roomName);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate(ctx.roomCode);\n            i0.ɵɵadvance(8);\n            i0.ɵɵtextInterpolate1(\" \", ctx.gamePhase === \"waiting\" ? \"Waiting for Players\" : ctx.gamePhase === \"playing\" ? \"Game in Progress\" : \"Game Finished\", \" \");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"waiting\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"playing\" && ctx.currentPlayerName);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"waiting\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"playing\");\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngForOf\", ctx.players);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngForOf\", ctx.chatMessages);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.chatInput);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", !ctx.chatInput.trim());\n            i0.ɵɵadvance(10);\n            i0.ɵɵtextInterpolate(ctx.maxPlayers);\n            i0.ɵɵadvance(5);\n            i0.ɵɵtextInterpolate(ctx.gameVariant);\n            i0.ɵɵadvance(5);\n            i0.ɵɵtextInterpolate1(\"\", ctx.turnTimeLimit, \"s\");\n            i0.ɵɵadvance(5);\n            i0.ɵɵtextInterpolate(ctx.pointLimit);\n          }\n        },\n        dependencies: [CommonModule, i4.NgClass, i4.NgForOf, i4.NgIf, FormsModule, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.MaxLengthValidator, i5.NgModel, i5.NgForm],\n        styles: [\"@charset \\\"UTF-8\\\";.card-style[_ngcontent-%COMP%]{background:#fff;border-radius:8px;position:relative;box-shadow:0 2px 4px #0000001a;overflow:hidden}.card-rank[_ngcontent-%COMP%]{position:absolute;top:6px;left:6px;font-weight:700;font-size:.875rem;line-height:1}.card-suit[_ngcontent-%COMP%]{position:absolute;bottom:6px;right:6px;font-weight:700;font-size:1.125rem;line-height:1}.card-red[_ngcontent-%COMP%]{color:#dc2626;border:2px solid #dc2626;box-shadow:inset 0 0 0 1px #dc2626}.card-black[_ngcontent-%COMP%]{color:#1f2937;border:2px solid #1f2937;box-shadow:inset 0 0 0 1px #1f2937}.hand-card[_ngcontent-%COMP%]{width:3rem;height:4rem}.discard-card[_ngcontent-%COMP%]{width:4rem;height:6rem}.discard-card[_ngcontent-%COMP%]   .card-rank[_ngcontent-%COMP%]{font-size:1rem;top:8px;left:8px}.discard-card[_ngcontent-%COMP%]   .card-suit[_ngcontent-%COMP%]{font-size:1.25rem;bottom:8px;right:8px}.player-circle[_ngcontent-%COMP%]{width:60px;height:60px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:.875rem;color:#fff;position:relative;border:3px solid rgba(255,255,255,.3);box-shadow:0 2px 8px #0003}.player-circle.active-turn[_ngcontent-%COMP%]:after{content:\\\"\\\\2713\\\";position:absolute;bottom:-8px;left:50%;transform:translate(-50%);background:#10b981;color:#fff;border-radius:50%;width:18px;height:18px;display:flex;align-items:center;justify-content:center;font-size:12px;font-weight:700;border:2px solid white}.table-container[_ngcontent-%COMP%]{position:relative;width:100%;max-width:600px;margin:0 auto}.players-around-table[_ngcontent-%COMP%]{position:relative;width:100%;height:400px}.player-position[_ngcontent-%COMP%]{position:absolute}.player-top[_ngcontent-%COMP%]{top:10px;left:50%;transform:translate(-50%)}.player-top-right[_ngcontent-%COMP%]{top:30px;right:30px}.player-right[_ngcontent-%COMP%]{top:50%;right:10px;transform:translateY(-50%)}.player-bottom-right[_ngcontent-%COMP%]{bottom:30px;right:30px}.player-bottom[_ngcontent-%COMP%]{bottom:10px;left:50%;transform:translate(-50%)}.player-bottom-left[_ngcontent-%COMP%]{bottom:30px;left:30px}.player-left[_ngcontent-%COMP%]{top:50%;left:10px;transform:translateY(-50%)}.player-top-left[_ngcontent-%COMP%]{top:30px;left:30px}.game-table[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);width:300px;height:200px;background:linear-gradient(135deg,#0f5132,#198754);border-radius:100px;border:4px solid #ffd700;display:flex;align-items:center;justify-content:center;box-shadow:inset 0 0 20px #0000004d,0 4px 16px #0000004d}\"]\n      });\n    }\n  }\n  return GameRoomComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}