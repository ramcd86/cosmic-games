{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let SocketService = /*#__PURE__*/(() => {\n  class SocketService {\n    constructor() {\n      this.socket = null;\n      this.connected = false;\n      // Observable streams for real-time updates\n      this.roomUpdatedSubject = new BehaviorSubject(null);\n      this.gameUpdatedSubject = new BehaviorSubject(null);\n      this.playerJoinedSubject = new BehaviorSubject(null);\n      this.playerLeftSubject = new BehaviorSubject(null);\n      this.chatReceivedSubject = new BehaviorSubject(null);\n      this.errorSubject = new BehaviorSubject(null);\n      this.gameStartedSubject = new BehaviorSubject(false);\n      this.gameEndedSubject = new BehaviorSubject(null);\n      // Public observables\n      this.roomUpdated$ = this.roomUpdatedSubject.asObservable();\n      this.gameUpdated$ = this.gameUpdatedSubject.asObservable();\n      this.playerJoined$ = this.playerJoinedSubject.asObservable();\n      this.playerLeft$ = this.playerLeftSubject.asObservable();\n      this.chatReceived$ = this.chatReceivedSubject.asObservable();\n      this.error$ = this.errorSubject.asObservable();\n      this.gameStarted$ = this.gameStartedSubject.asObservable();\n      this.gameEnded$ = this.gameEndedSubject.asObservable();\n    }\n    /**\n     * Connect to the Socket.IO server\n     */\n    connect() {\n      if (this.connected) return;\n      this.socket = io(environment.apiUrl, {\n        transports: ['websocket', 'polling']\n      });\n      this.setupEventListeners();\n    }\n    /**\n     * Disconnect from the Socket.IO server\n     */\n    disconnect() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n        this.connected = false;\n      }\n    }\n    /**\n     * Join a room\n     */\n    joinRoom(roomCode, playerName) {\n      if (this.socket) {\n        this.socket.emit('join-room', roomCode, playerName);\n      }\n    }\n    /**\n     * Leave a room\n     */\n    leaveRoom(roomCode) {\n      if (this.socket) {\n        this.socket.emit('leave-room', roomCode);\n      }\n    }\n    /**\n     * Make a game action\n     */\n    makeGameAction(roomCode, action) {\n      if (this.socket) {\n        this.socket.emit('game-action', roomCode, action);\n      }\n    }\n    /**\n     * Send a chat message\n     */\n    sendChatMessage(roomCode, message) {\n      if (this.socket) {\n        this.socket.emit('chat-message', roomCode, message);\n      }\n    }\n    /**\n     * Toggle player ready status\n     */\n    togglePlayerReady(roomCode) {\n      if (this.socket) {\n        this.socket.emit('player-ready', roomCode);\n      }\n    }\n    /**\n     * Start the game\n     */\n    startGame(roomCode) {\n      if (this.socket) {\n        this.socket.emit('start-game', roomCode);\n      }\n    }\n    /**\n     * Check if connected\n     */\n    isConnected() {\n      return this.connected && this.socket?.connected === true;\n    }\n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n      if (!this.socket) return;\n      this.socket.on('connect', () => {\n        this.connected = true;\n        console.log('Connected to game server');\n      });\n      this.socket.on('disconnect', () => {\n        this.connected = false;\n        console.log('Disconnected from game server');\n      });\n      this.socket.on('room-updated', room => {\n        this.roomUpdatedSubject.next(room);\n      });\n      this.socket.on('game-updated', gameState => {\n        this.gameUpdatedSubject.next(gameState);\n      });\n      this.socket.on('player-joined', player => {\n        this.playerJoinedSubject.next(player);\n      });\n      this.socket.on('player-left', playerId => {\n        this.playerLeftSubject.next(playerId);\n      });\n      this.socket.on('chat-received', (playerId, playerName, message, timestamp) => {\n        this.chatReceivedSubject.next({\n          playerId,\n          playerName,\n          message,\n          timestamp\n        });\n      });\n      this.socket.on('error', message => {\n        this.errorSubject.next(message);\n        console.error('Socket error:', message);\n      });\n      this.socket.on('game-started', () => {\n        this.gameStartedSubject.next(true);\n      });\n      this.socket.on('game-ended', (winnerId, finalScores) => {\n        this.gameEndedSubject.next({\n          winnerId,\n          finalScores\n        });\n      });\n    }\n    static {\n      this.ɵfac = function SocketService_Factory(t) {\n        return new (t || SocketService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: SocketService,\n        factory: SocketService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return SocketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}