{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/game-api.service\";\nimport * as i3 from \"../../services/socket.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nconst _c0 = () => [];\nfunction GameRoomComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1, \" Waiting for all players to be ready... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.currentPlayerName, \"'s turn \");\n  }\n}\nfunction GameRoomComponent_div_20_div_2_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵtext(1, \" AI Player \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 40);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 41);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, GameRoomComponent_div_20_div_2_div_1_div_5_Template, 2, 0, \"div\", 42);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(slot_r2.player.name);\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(slot_r2.player.isReady ? \"text-green-400\" : \"text-yellow-400\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", slot_r2.player.isReady ? \"\\u2713 Ready\" : \"\\u23F3 Not Ready\", \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", slot_r2.player.isAI);\n  }\n}\nfunction GameRoomComponent_div_20_div_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 44)(1, \"div\", 45);\n    i0.ɵɵtext(2, \"\\uD83D\\uDC64\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 41);\n    i0.ɵɵtext(4, \"Empty Slot\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction GameRoomComponent_div_20_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38);\n    i0.ɵɵtemplate(1, GameRoomComponent_div_20_div_2_div_1_Template, 6, 5, \"div\", 39)(2, GameRoomComponent_div_20_div_2_ng_template_2_Template, 5, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r2 = ctx.$implicit;\n    const emptySlot_r3 = i0.ɵɵreference(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", slot_r2.player)(\"ngIfElse\", emptySlot_r3);\n  }\n}\nfunction GameRoomComponent_div_20_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 46);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.toggleReady());\n    });\n    i0.ɵɵtext(1, \" Ready Up \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.toggleReady());\n    });\n    i0.ɵɵtext(1, \" Not Ready \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.startGame());\n    });\n    i0.ɵɵtext(1, \" Start Game \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32);\n    i0.ɵɵtemplate(2, GameRoomComponent_div_20_div_2_Template, 4, 2, \"div\", 33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 34);\n    i0.ɵɵtemplate(4, GameRoomComponent_div_20_button_4_Template, 2, 0, \"button\", 35)(5, GameRoomComponent_div_20_button_5_Template, 2, 0, \"button\", 36)(6, GameRoomComponent_div_20_button_6_Template, 2, 0, \"button\", 37);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.playerSlots);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isPlayerReady);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isPlayerReady);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isHost && ctx_r0.canStartGame);\n  }\n}\nfunction GameRoomComponent_div_21_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 61);\n  }\n}\nfunction GameRoomComponent_div_21_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 62);\n  }\n}\nfunction GameRoomComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 49);\n    i0.ɵɵtemplate(2, GameRoomComponent_div_21_div_2_Template, 1, 0, \"div\", 50);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 51)(4, \"div\", 31);\n    i0.ɵɵelement(5, \"div\", 52);\n    i0.ɵɵelementStart(6, \"p\", 53);\n    i0.ɵɵtext(7, \"Deck\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 31);\n    i0.ɵɵelement(9, \"div\", 54);\n    i0.ɵɵelementStart(10, \"p\", 53);\n    i0.ɵɵtext(11, \"Discard\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\", 55);\n    i0.ɵɵtemplate(13, GameRoomComponent_div_21_div_13_Template, 1, 0, \"div\", 56);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 57)(15, \"button\", 58);\n    i0.ɵɵtext(16, \"Draw\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"button\", 59);\n    i0.ɵɵtext(18, \"Knock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"button\", 60);\n    i0.ɵɵtext(20, \"Gin\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(2, _c0).constructor(10));\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(3, _c0).constructor(10));\n  }\n}\nfunction GameRoomComponent_div_27_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 69);\n    i0.ɵɵtext(1, \"\\uD83D\\uDC51\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 70);\n    i0.ɵɵtext(1, \"\\u25CF\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 71);\n    i0.ɵɵtext(1, \"\\u25CF\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 63)(1, \"div\")(2, \"div\", 64);\n    i0.ɵɵtext(3);\n    i0.ɵɵtemplate(4, GameRoomComponent_div_27_span_4_Template, 2, 0, \"span\", 65);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 66);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 41);\n    i0.ɵɵtemplate(8, GameRoomComponent_div_27_span_8_Template, 2, 0, \"span\", 67)(9, GameRoomComponent_div_27_span_9_Template, 2, 0, \"span\", 68);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const player_r7 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(player_r7.id === ctx_r0.currentPlayerId ? \"bg-casino-gold/20\" : \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", player_r7.name, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", player_r7.id === ctx_r0.hostId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Score: \", player_r7.score, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", player_r7.isConnected);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !player_r7.isConnected);\n  }\n}\nfunction GameRoomComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41)(1, \"span\", 72);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 73);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r8 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", message_r8.playerName, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r8.text);\n  }\n}\nexport class GameRoomComponent {\n  constructor(route, router, gameApiService, socketService) {\n    this.route = route;\n    this.router = router;\n    this.gameApiService = gameApiService;\n    this.socketService = socketService;\n    this.roomCode = '';\n    this.roomName = 'Cosmic Game Room';\n    this.gamePhase = 'waiting';\n    // Real game data\n    this.currentRoom = null;\n    this.players = [];\n    // Subscriptions\n    this.subscriptions = [];\n    this.playerSlots = [];\n    this.currentPlayerId = '';\n    this.currentPlayerName = '';\n    this.hostId = '';\n    this.isHost = false;\n    this.isPlayerReady = false;\n    this.canStartGame = false;\n    // Room settings\n    this.maxPlayers = 6;\n    this.gameVariant = 'classic';\n    this.turnTimeLimit = 30;\n    this.pointLimit = 100;\n    // Chat\n    this.chatMessages = [];\n    this.chatInput = '';\n  }\n  ngOnInit() {\n    this.roomCode = this.route.snapshot.params['code'];\n    console.log('Joining room:', this.roomCode);\n    // Connect to WebSocket\n    this.socketService.connect();\n    // Subscribe to real-time updates\n    this.setupSocketSubscriptions();\n    // Load room data\n    this.loadRoomData();\n  }\n  ngOnDestroy() {\n    // Cleanup subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    // Leave room and disconnect socket\n    if (this.roomCode) {\n      this.socketService.leaveRoom(this.roomCode);\n    }\n    this.socketService.disconnect();\n  }\n  setupSocketSubscriptions() {\n    // Room updates\n    this.subscriptions.push(this.socketService.roomUpdated$.subscribe(room => {\n      if (room) {\n        this.updateRoomData(room);\n      }\n    }));\n    // Game updates\n    this.subscriptions.push(this.socketService.gameUpdated$.subscribe(gameState => {\n      if (gameState && this.currentRoom) {\n        this.currentRoom.gameState = gameState;\n        this.gamePhase = gameState.phase;\n      }\n    }));\n    // Player joined\n    this.subscriptions.push(this.socketService.playerJoined$.subscribe(player => {\n      if (player && this.currentRoom) {\n        // Player already added via room update, just show notification\n        this.addChatMessage('System', `${player.name} joined the room`);\n      }\n    }));\n    // Player left\n    this.subscriptions.push(this.socketService.playerLeft$.subscribe(playerId => {\n      if (playerId && this.currentRoom) {\n        const player = this.currentRoom.players.find(p => p.id === playerId);\n        if (player) {\n          this.addChatMessage('System', `${player.name} left the room`);\n        }\n      }\n    }));\n    // Chat messages\n    this.subscriptions.push(this.socketService.chatReceived$.subscribe(chat => {\n      if (chat) {\n        this.addChatMessage(chat.playerName, chat.message);\n      }\n    }));\n    // Errors\n    this.subscriptions.push(this.socketService.error$.subscribe(error => {\n      if (error) {\n        console.error('Socket error:', error);\n        this.addChatMessage('System', `Error: ${error}`);\n      }\n    }));\n    // Game started\n    this.subscriptions.push(this.socketService.gameStarted$.subscribe(started => {\n      if (started) {\n        this.gamePhase = 'playing';\n        this.addChatMessage('System', 'Game started!');\n      }\n    }));\n  }\n  loadRoomData() {\n    this.gameApiService.getRoom(this.roomCode).subscribe({\n      next: response => {\n        if (response.success && response.data) {\n          this.updateRoomData(response.data);\n        } else {\n          console.error('Failed to load room:', response.error);\n          this.router.navigate(['/']);\n        }\n      },\n      error: error => {\n        console.error('Error loading room:', error);\n        this.router.navigate(['/']);\n      }\n    });\n  }\n  updateRoomData(room) {\n    this.currentRoom = room;\n    this.roomName = room.name;\n    this.players = room.players;\n    this.hostId = room.hostId;\n    this.gamePhase = room.gameState.phase;\n    this.maxPlayers = room.settings.maxPlayers;\n    this.gameVariant = room.settings.gameVariant;\n    this.turnTimeLimit = room.settings.turnTimeLimit;\n    this.pointLimit = room.settings.pointLimit;\n    // Update player slots\n    this.playerSlots = Array(this.maxPlayers).fill(null).map((_, i) => ({\n      index: i,\n      player: i < this.players.length ? this.players[i] : null\n    }));\n    // Determine if current user is host\n    // TODO: Get actual current player ID from authentication\n    this.isHost = this.hostId === this.currentPlayerId;\n    // Check if can start game\n    this.canStartGame = this.isHost && this.players.length >= 2 && this.players.every(p => p.isReady) && this.gamePhase === 'waiting';\n    // Update current player info\n    if (room.gameState.currentPlayer) {\n      const currentPlayer = this.players.find(p => p.id === room.gameState.currentPlayer);\n      this.currentPlayerName = currentPlayer?.name || '';\n    }\n  }\n  addChatMessage(playerName, text) {\n    this.chatMessages.push({\n      playerName,\n      text,\n      timestamp: new Date()\n    });\n  }\n  toggleReady() {\n    this.isPlayerReady = !this.isPlayerReady;\n    this.socketService.togglePlayerReady(this.roomCode);\n    console.log('Player ready status:', this.isPlayerReady);\n  }\n  startGame() {\n    if (!this.canStartGame) return;\n    this.socketService.startGame(this.roomCode);\n    console.log('Starting game...');\n  }\n  sendChatMessage() {\n    if (!this.chatInput.trim()) return;\n    this.socketService.sendChatMessage(this.roomCode, this.chatInput.trim());\n    this.chatInput = '';\n  }\n  leaveRoom() {\n    if (confirm('Are you sure you want to leave the room?')) {\n      this.socketService.leaveRoom(this.roomCode);\n      this.router.navigate(['/']);\n    }\n  }\n  static {\n    this.ɵfac = function GameRoomComponent_Factory(t) {\n      return new (t || GameRoomComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.GameApiService), i0.ɵɵdirectiveInject(i3.SocketService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GameRoomComponent,\n      selectors: [[\"app-game-room\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 61,\n      vars: 15,\n      consts: [[\"emptySlot\", \"\"], [1, \"max-w-6xl\", \"mx-auto\"], [1, \"casino-panel\", \"mb-6\"], [1, \"flex\", \"justify-between\", \"items-center\"], [1, \"text-2xl\", \"font-bold\", \"text-gold\"], [1, \"text-casino-silver\"], [1, \"font-mono\", \"text-casino-gold\"], [1, \"bg-red-600\", \"hover:bg-red-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\", \"transition-colors\", 3, \"click\"], [1, \"grid\", \"lg:grid-cols-4\", \"gap-6\"], [1, \"lg:col-span-3\"], [1, \"casino-table\", \"p-8\", \"mb-6\"], [1, \"text-center\", \"mb-8\"], [1, \"text-3xl\", \"font-bold\", \"text-casino-silver\", \"mb-2\"], [\"class\", \"text-casino-silver/80\", 4, \"ngIf\"], [\"class\", \"text-casino-gold\", 4, \"ngIf\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"class\", \"space-y-6\", 4, \"ngIf\"], [1, \"space-y-6\"], [1, \"casino-panel\"], [1, \"text-lg\", \"font-bold\", \"text-casino-gold\", \"mb-4\"], [1, \"space-y-2\"], [\"class\", \"flex justify-between items-center p-2 rounded\", 3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"space-y-2\", \"max-h-40\", \"overflow-y-auto\", \"mb-4\"], [\"class\", \"text-sm\", 4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"gap-2\", 3, \"ngSubmit\"], [\"name\", \"chatInput\", \"type\", \"text\", \"placeholder\", \"Type a message...\", \"maxlength\", \"100\", 1, \"casino-input\", \"flex-1\", \"text-sm\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\", 1, \"bg-casino-gold\", \"text-casino-black\", \"px-3\", \"py-1\", \"rounded\", \"text-sm\", \"hover:bg-casino-bronze\", \"transition-colors\", 3, \"disabled\"], [1, \"space-y-2\", \"text-sm\"], [1, \"flex\", \"justify-between\"], [1, \"text-casino-gold\"], [1, \"text-casino-silver/80\"], [1, \"text-center\"], [1, \"grid\", \"grid-cols-2\", \"md:grid-cols-3\", \"gap-4\", \"max-w-md\", \"mx-auto\"], [\"class\", \"casino-panel p-4 text-center min-h-[100px] flex flex-col justify-center\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-8\", \"space-y-4\"], [\"class\", \"casino-button mr-4\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg mr-4\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"casino-button\", 3, \"click\", 4, \"ngIf\"], [1, \"casino-panel\", \"p-4\", \"text-center\", \"min-h-[100px]\", \"flex\", \"flex-col\", \"justify-center\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"text-lg\", \"font-bold\", \"text-casino-gold\"], [1, \"text-sm\"], [\"class\", \"text-xs text-casino-silver/60\", 4, \"ngIf\"], [1, \"text-xs\", \"text-casino-silver/60\"], [1, \"text-casino-silver/50\"], [1, \"text-2xl\", \"mb-2\"], [1, \"casino-button\", \"mr-4\", 3, \"click\"], [1, \"bg-yellow-600\", \"hover:bg-yellow-700\", \"text-white\", \"px-6\", \"py-3\", \"rounded-lg\", \"mr-4\", 3, \"click\"], [1, \"casino-button\", 3, \"click\"], [1, \"flex\", \"justify-center\", \"space-x-2\"], [\"class\", \"w-12 h-16 bg-casino-blue rounded border border-casino-silver/30\", 4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"justify-center\", \"space-x-8\"], [1, \"w-16\", \"h-24\", \"bg-casino-charcoal\", \"rounded\", \"border-2\", \"border-casino-gold\", \"cursor-pointer\", \"hover:scale-105\", \"transition-transform\"], [1, \"text-casino-silver\", \"text-sm\", \"mt-1\"], [1, \"w-16\", \"h-24\", \"bg-card-background\", \"rounded\", \"border\", \"border-gray-300\", \"cursor-pointer\", \"hover:scale-105\", \"transition-transform\"], [1, \"flex\", \"justify-center\", \"space-x-1\"], [\"class\", \"w-12 h-16 bg-card-background rounded border border-gray-300 cursor-pointer hover:scale-105 hover:-translate-y-2 transition-all\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-center\", \"space-x-4\"], [1, \"casino-button\"], [1, \"bg-yellow-600\", \"hover:bg-yellow-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\"], [1, \"bg-green-600\", \"hover:bg-green-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\"], [1, \"w-12\", \"h-16\", \"bg-casino-blue\", \"rounded\", \"border\", \"border-casino-silver/30\"], [1, \"w-12\", \"h-16\", \"bg-card-background\", \"rounded\", \"border\", \"border-gray-300\", \"cursor-pointer\", \"hover:scale-105\", \"hover:-translate-y-2\", \"transition-all\"], [1, \"flex\", \"justify-between\", \"items-center\", \"p-2\", \"rounded\"], [1, \"font-medium\", \"text-casino-silver\"], [\"class\", \"text-casino-gold text-xs\", 4, \"ngIf\"], [1, \"text-sm\", \"text-casino-silver/60\"], [\"class\", \"text-green-400\", 4, \"ngIf\"], [\"class\", \"text-red-400\", 4, \"ngIf\"], [1, \"text-casino-gold\", \"text-xs\"], [1, \"text-green-400\"], [1, \"text-red-400\"], [1, \"text-casino-gold\", \"font-medium\"], [1, \"text-casino-silver\", \"ml-1\"]],\n      template: function GameRoomComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\")(4, \"h1\", 4);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"p\", 5);\n          i0.ɵɵtext(7, \"Room Code: \");\n          i0.ɵɵelementStart(8, \"span\", 6);\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(10, \"button\", 7);\n          i0.ɵɵlistener(\"click\", function GameRoomComponent_Template_button_click_10_listener() {\n            return ctx.leaveRoom();\n          });\n          i0.ɵɵtext(11, \" Leave Room \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\", 9)(14, \"div\", 10)(15, \"div\", 11)(16, \"h2\", 12);\n          i0.ɵɵtext(17);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, GameRoomComponent_div_18_Template, 2, 0, \"div\", 13)(19, GameRoomComponent_div_19_Template, 2, 1, \"div\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(20, GameRoomComponent_div_20_Template, 7, 4, \"div\", 15)(21, GameRoomComponent_div_21_Template, 21, 4, \"div\", 16);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"div\", 17)(23, \"div\", 18)(24, \"h3\", 19);\n          i0.ɵɵtext(25, \"Players\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"div\", 20);\n          i0.ɵɵtemplate(27, GameRoomComponent_div_27_Template, 10, 7, \"div\", 21);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"div\", 18)(29, \"h3\", 19);\n          i0.ɵɵtext(30, \"Chat\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"div\", 22);\n          i0.ɵɵtemplate(32, GameRoomComponent_div_32_Template, 5, 2, \"div\", 23);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"form\", 24);\n          i0.ɵɵlistener(\"ngSubmit\", function GameRoomComponent_Template_form_ngSubmit_33_listener() {\n            return ctx.sendChatMessage();\n          });\n          i0.ɵɵelementStart(34, \"input\", 25);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function GameRoomComponent_Template_input_ngModelChange_34_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.chatInput, $event) || (ctx.chatInput = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"button\", 26);\n          i0.ɵɵtext(36, \" Send \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(37, \"div\", 18)(38, \"h3\", 19);\n          i0.ɵɵtext(39, \"Settings\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(40, \"div\", 27)(41, \"div\", 28)(42, \"span\", 5);\n          i0.ɵɵtext(43, \"Max Players:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(44, \"span\", 29);\n          i0.ɵɵtext(45);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(46, \"div\", 28)(47, \"span\", 5);\n          i0.ɵɵtext(48, \"Game Variant:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(49, \"span\", 29);\n          i0.ɵɵtext(50);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(51, \"div\", 28)(52, \"span\", 5);\n          i0.ɵɵtext(53, \"Turn Limit:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(54, \"span\", 29);\n          i0.ɵɵtext(55);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(56, \"div\", 28)(57, \"span\", 5);\n          i0.ɵɵtext(58, \"Point Limit:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(59, \"span\", 29);\n          i0.ɵɵtext(60);\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.roomName);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.roomCode);\n          i0.ɵɵadvance(8);\n          i0.ɵɵtextInterpolate1(\" \", ctx.gamePhase === \"waiting\" ? \"Waiting for Players\" : ctx.gamePhase === \"playing\" ? \"Game in Progress\" : \"Game Finished\", \" \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"waiting\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"playing\" && ctx.currentPlayerName);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"waiting\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"playing\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.players);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.chatMessages);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.chatInput);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", !ctx.chatInput.trim());\n          i0.ɵɵadvance(10);\n          i0.ɵɵtextInterpolate(ctx.maxPlayers);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.gameVariant);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"\", ctx.turnTimeLimit, \"s\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.pointLimit);\n        }\n      },\n      dependencies: [CommonModule, i4.NgForOf, i4.NgIf, FormsModule, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.MaxLengthValidator, i5.NgModel, i5.NgForm],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","currentPlayerName","ɵɵtemplate","GameRoomComponent_div_20_div_2_div_1_div_5_Template","ɵɵtextInterpolate","slot_r2","player","name","ɵɵclassMap","isReady","ɵɵproperty","isAI","GameRoomComponent_div_20_div_2_div_1_Template","GameRoomComponent_div_20_div_2_ng_template_2_Template","ɵɵtemplateRefExtractor","emptySlot_r3","ɵɵlistener","GameRoomComponent_div_20_button_4_Template_button_click_0_listener","ɵɵrestoreView","_r4","ɵɵnextContext","ɵɵresetView","toggleReady","GameRoomComponent_div_20_button_5_Template_button_click_0_listener","_r5","GameRoomComponent_div_20_button_6_Template_button_click_0_listener","_r6","startGame","GameRoomComponent_div_20_div_2_Template","GameRoomComponent_div_20_button_4_Template","GameRoomComponent_div_20_button_5_Template","GameRoomComponent_div_20_button_6_Template","playerSlots","isPlayerReady","isHost","canStartGame","ɵɵelement","GameRoomComponent_div_21_div_2_Template","GameRoomComponent_div_21_div_13_Template","ɵɵpureFunction0","_c0","constructor","GameRoomComponent_div_27_span_4_Template","GameRoomComponent_div_27_span_8_Template","GameRoomComponent_div_27_span_9_Template","player_r7","id","currentPlayerId","hostId","score","isConnected","message_r8","playerName","text","GameRoomComponent","route","router","gameApiService","socketService","roomCode","roomName","gamePhase","currentRoom","players","subscriptions","maxPlayers","gameVariant","turnTimeLimit","pointLimit","chatMessages","chatInput","ngOnInit","snapshot","params","console","log","connect","setupSocketSubscriptions","loadRoomData","ngOnDestroy","forEach","sub","unsubscribe","leaveRoom","disconnect","push","roomUpdated$","subscribe","room","updateRoomData","gameUpdated$","gameState","phase","playerJoined$","addChatMessage","playerLeft$","playerId","find","p","chatReceived$","chat","message","error$","error","gameStarted$","started","getRoom","next","response","success","data","navigate","settings","Array","fill","map","_","i","index","length","every","currentPlayer","timestamp","Date","togglePlayerReady","sendChatMessage","trim","confirm","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","GameApiService","i3","SocketService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","GameRoomComponent_Template","rf","ctx","GameRoomComponent_Template_button_click_10_listener","GameRoomComponent_div_18_Template","GameRoomComponent_div_19_Template","GameRoomComponent_div_20_Template","GameRoomComponent_div_21_Template","GameRoomComponent_div_27_Template","GameRoomComponent_div_32_Template","GameRoomComponent_Template_form_ngSubmit_33_listener","ɵɵtwoWayListener","GameRoomComponent_Template_input_ngModelChange_34_listener","$event","ɵɵtwoWayBindingSet","ɵɵtwoWayProperty","i4","NgForOf","NgIf","i5","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","MaxLengthValidator","NgModel","NgForm","encapsulation"],"sources":["C:\\_dev\\cosmic-games\\frontend\\src\\app\\pages\\game-room\\game-room.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { GameApiService } from '../../services/game-api.service';\r\nimport { SocketService } from '../../services/socket.service';\r\nimport { GameRoom, Player } from '@cosmic-games/shared';\r\n\r\n@Component({\r\n  selector: 'app-game-room',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Room Header -->\r\n      <div class=\"casino-panel mb-6\">\r\n        <div class=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 class=\"text-2xl font-bold text-gold\">{{ roomName }}</h1>\r\n            <p class=\"text-casino-silver\">Room Code: <span class=\"font-mono text-casino-gold\">{{ roomCode }}</span></p>\r\n          </div>\r\n          <button \r\n            (click)=\"leaveRoom()\"\r\n            class=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\">\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"grid lg:grid-cols-4 gap-6\">\r\n        <!-- Game Area -->\r\n        <div class=\"lg:col-span-3\">\r\n          <div class=\"casino-table p-8 mb-6\">\r\n            <div class=\"text-center mb-8\">\r\n              <h2 class=\"text-3xl font-bold text-casino-silver mb-2\">\r\n                {{ gamePhase === 'waiting' ? 'Waiting for Players' : \r\n                   gamePhase === 'playing' ? 'Game in Progress' : 'Game Finished' }}\r\n              </h2>\r\n              \r\n              <div *ngIf=\"gamePhase === 'waiting'\" class=\"text-casino-silver/80\">\r\n                Waiting for all players to be ready...\r\n              </div>\r\n              \r\n              <div *ngIf=\"gamePhase === 'playing' && currentPlayerName\" class=\"text-casino-gold\">\r\n                {{ currentPlayerName }}'s turn\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Waiting Screen -->\r\n            <div *ngIf=\"gamePhase === 'waiting'\" class=\"text-center\">\r\n              <div class=\"grid grid-cols-2 md:grid-cols-3 gap-4 max-w-md mx-auto\">\r\n                <div \r\n                  *ngFor=\"let slot of playerSlots\" \r\n                  class=\"casino-panel p-4 text-center min-h-[100px] flex flex-col justify-center\">\r\n                  <div *ngIf=\"slot.player; else emptySlot\">\r\n                    <div class=\"text-lg font-bold text-casino-gold\">{{ slot.player.name }}</div>\r\n                    <div class=\"text-sm\" [class]=\"slot.player.isReady ? 'text-green-400' : 'text-yellow-400'\">\r\n                      {{ slot.player.isReady ? '✓ Ready' : '⏳ Not Ready' }}\r\n                    </div>\r\n                    <div *ngIf=\"slot.player.isAI\" class=\"text-xs text-casino-silver/60\">\r\n                      AI Player\r\n                    </div>\r\n                  </div>\r\n                  <ng-template #emptySlot>\r\n                    <div class=\"text-casino-silver/50\">\r\n                      <div class=\"text-2xl mb-2\">👤</div>\r\n                      <div class=\"text-sm\">Empty Slot</div>\r\n                    </div>\r\n                  </ng-template>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mt-8 space-y-4\">\r\n                <button \r\n                  *ngIf=\"!isPlayerReady\"\r\n                  (click)=\"toggleReady()\"\r\n                  class=\"casino-button mr-4\">\r\n                  Ready Up\r\n                </button>\r\n                \r\n                <button \r\n                  *ngIf=\"isPlayerReady\"\r\n                  (click)=\"toggleReady()\"\r\n                  class=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg mr-4\">\r\n                  Not Ready\r\n                </button>\r\n\r\n                <button \r\n                  *ngIf=\"isHost && canStartGame\"\r\n                  (click)=\"startGame()\"\r\n                  class=\"casino-button\">\r\n                  Start Game\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Game Screen -->\r\n            <div *ngIf=\"gamePhase === 'playing'\" class=\"space-y-6\">\r\n              <!-- Opponent Cards -->\r\n              <div class=\"flex justify-center space-x-2\">\r\n                <div \r\n                  *ngFor=\"let i of [].constructor(10)\" \r\n                  class=\"w-12 h-16 bg-casino-blue rounded border border-casino-silver/30\">\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Center Area -->\r\n              <div class=\"flex justify-center space-x-8\">\r\n                <!-- Deck -->\r\n                <div class=\"text-center\">\r\n                  <div class=\"w-16 h-24 bg-casino-charcoal rounded border-2 border-casino-gold cursor-pointer hover:scale-105 transition-transform\">\r\n                  </div>\r\n                  <p class=\"text-casino-silver text-sm mt-1\">Deck</p>\r\n                </div>\r\n\r\n                <!-- Discard Pile -->\r\n                <div class=\"text-center\">\r\n                  <div class=\"w-16 h-24 bg-card-background rounded border border-gray-300 cursor-pointer hover:scale-105 transition-transform\">\r\n                  </div>\r\n                  <p class=\"text-casino-silver text-sm mt-1\">Discard</p>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Player Hand -->\r\n              <div class=\"flex justify-center space-x-1\">\r\n                <div \r\n                  *ngFor=\"let i of [].constructor(10)\" \r\n                  class=\"w-12 h-16 bg-card-background rounded border border-gray-300 cursor-pointer hover:scale-105 hover:-translate-y-2 transition-all\">\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Game Actions -->\r\n              <div class=\"text-center space-x-4\">\r\n                <button class=\"casino-button\">Draw</button>\r\n                <button class=\"bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg\">Knock</button>\r\n                <button class=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg\">Gin</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Sidebar -->\r\n        <div class=\"space-y-6\">\r\n          <!-- Players List -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Players</h3>\r\n            <div class=\"space-y-2\">\r\n              <div \r\n                *ngFor=\"let player of players\" \r\n                class=\"flex justify-between items-center p-2 rounded\"\r\n                [class]=\"player.id === currentPlayerId ? 'bg-casino-gold/20' : ''\">\r\n                <div>\r\n                  <div class=\"font-medium text-casino-silver\">\r\n                    {{ player.name }}\r\n                    <span *ngIf=\"player.id === hostId\" class=\"text-casino-gold text-xs\">👑</span>\r\n                  </div>\r\n                  <div class=\"text-sm text-casino-silver/60\">\r\n                    Score: {{ player.score }}\r\n                  </div>\r\n                </div>\r\n                <div class=\"text-sm\">\r\n                  <span \r\n                    *ngIf=\"player.isConnected\" \r\n                    class=\"text-green-400\">●</span>\r\n                  <span \r\n                    *ngIf=\"!player.isConnected\" \r\n                    class=\"text-red-400\">●</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Chat -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Chat</h3>\r\n            <div class=\"space-y-2 max-h-40 overflow-y-auto mb-4\">\r\n              <div \r\n                *ngFor=\"let message of chatMessages\" \r\n                class=\"text-sm\">\r\n                <span class=\"text-casino-gold font-medium\">{{ message.playerName }}:</span>\r\n                <span class=\"text-casino-silver ml-1\">{{ message.text }}</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <form (ngSubmit)=\"sendChatMessage()\" class=\"flex gap-2\">\r\n              <input \r\n                [(ngModel)]=\"chatInput\"\r\n                name=\"chatInput\"\r\n                type=\"text\" \r\n                class=\"casino-input flex-1 text-sm\"\r\n                placeholder=\"Type a message...\"\r\n                maxlength=\"100\">\r\n              <button \r\n                type=\"submit\"\r\n                [disabled]=\"!chatInput.trim()\"\r\n                class=\"bg-casino-gold text-casino-black px-3 py-1 rounded text-sm hover:bg-casino-bronze transition-colors\">\r\n                Send\r\n              </button>\r\n            </form>\r\n          </div>\r\n\r\n          <!-- Room Settings -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Settings</h3>\r\n            <div class=\"space-y-2 text-sm\">\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Max Players:</span>\r\n                <span class=\"text-casino-gold\">{{ maxPlayers }}</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Game Variant:</span>\r\n                <span class=\"text-casino-gold\">{{ gameVariant }}</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Turn Limit:</span>\r\n                <span class=\"text-casino-gold\">{{ turnTimeLimit }}s</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Point Limit:</span>\r\n                <span class=\"text-casino-gold\">{{ pointLimit }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class GameRoomComponent implements OnInit, OnDestroy {\r\n  roomCode = '';\r\n  roomName = 'Cosmic Game Room';\r\n  gamePhase: 'waiting' | 'playing' | 'finished' = 'waiting';\r\n  \r\n  // Real game data\r\n  currentRoom: GameRoom | null = null;\r\n  players: Player[] = [];\r\n  \r\n  // Subscriptions\r\n  private subscriptions: Subscription[] = [];\r\n  \r\n  playerSlots: any[] = [];\r\n  currentPlayerId = '';\r\n  currentPlayerName = '';\r\n  hostId = '';\r\n  isHost = false;\r\n  isPlayerReady = false;\r\n  canStartGame = false;\r\n\r\n  // Room settings\r\n  maxPlayers = 6;\r\n  gameVariant = 'classic';\r\n  turnTimeLimit = 30;\r\n  pointLimit = 100;\r\n\r\n  // Chat\r\n  chatMessages: { playerName: string; text: string; timestamp: Date }[] = [];\r\n  chatInput = '';\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private gameApiService: GameApiService,\r\n    private socketService: SocketService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.roomCode = this.route.snapshot.params['code'];\r\n    console.log('Joining room:', this.roomCode);\r\n    \r\n    // Connect to WebSocket\r\n    this.socketService.connect();\r\n    \r\n    // Subscribe to real-time updates\r\n    this.setupSocketSubscriptions();\r\n    \r\n    // Load room data\r\n    this.loadRoomData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Cleanup subscriptions\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n    \r\n    // Leave room and disconnect socket\r\n    if (this.roomCode) {\r\n      this.socketService.leaveRoom(this.roomCode);\r\n    }\r\n    this.socketService.disconnect();\r\n  }\r\n\r\n  private setupSocketSubscriptions(): void {\r\n    // Room updates\r\n    this.subscriptions.push(\r\n      this.socketService.roomUpdated$.subscribe(room => {\r\n        if (room) {\r\n          this.updateRoomData(room);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Game updates\r\n    this.subscriptions.push(\r\n      this.socketService.gameUpdated$.subscribe(gameState => {\r\n        if (gameState && this.currentRoom) {\r\n          this.currentRoom.gameState = gameState;\r\n          this.gamePhase = gameState.phase;\r\n        }\r\n      })\r\n    );\r\n\r\n    // Player joined\r\n    this.subscriptions.push(\r\n      this.socketService.playerJoined$.subscribe(player => {\r\n        if (player && this.currentRoom) {\r\n          // Player already added via room update, just show notification\r\n          this.addChatMessage('System', `${player.name} joined the room`);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Player left\r\n    this.subscriptions.push(\r\n      this.socketService.playerLeft$.subscribe(playerId => {\r\n        if (playerId && this.currentRoom) {\r\n          const player = this.currentRoom.players.find(p => p.id === playerId);\r\n          if (player) {\r\n            this.addChatMessage('System', `${player.name} left the room`);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    // Chat messages\r\n    this.subscriptions.push(\r\n      this.socketService.chatReceived$.subscribe(chat => {\r\n        if (chat) {\r\n          this.addChatMessage(chat.playerName, chat.message);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Errors\r\n    this.subscriptions.push(\r\n      this.socketService.error$.subscribe(error => {\r\n        if (error) {\r\n          console.error('Socket error:', error);\r\n          this.addChatMessage('System', `Error: ${error}`);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Game started\r\n    this.subscriptions.push(\r\n      this.socketService.gameStarted$.subscribe(started => {\r\n        if (started) {\r\n          this.gamePhase = 'playing';\r\n          this.addChatMessage('System', 'Game started!');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private loadRoomData(): void {\r\n    this.gameApiService.getRoom(this.roomCode).subscribe({\r\n      next: (response) => {\r\n        if (response.success && response.data) {\r\n          this.updateRoomData(response.data);\r\n        } else {\r\n          console.error('Failed to load room:', response.error);\r\n          this.router.navigate(['/']);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading room:', error);\r\n        this.router.navigate(['/']);\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateRoomData(room: GameRoom): void {\r\n    this.currentRoom = room;\r\n    this.roomName = room.name;\r\n    this.players = room.players;\r\n    this.hostId = room.hostId;\r\n    this.gamePhase = room.gameState.phase;\r\n    this.maxPlayers = room.settings.maxPlayers;\r\n    this.gameVariant = room.settings.gameVariant as string;\r\n    this.turnTimeLimit = room.settings.turnTimeLimit;\r\n    this.pointLimit = room.settings.pointLimit;\r\n    \r\n    // Update player slots\r\n    this.playerSlots = Array(this.maxPlayers).fill(null).map((_, i) => ({\r\n      index: i,\r\n      player: i < this.players.length ? this.players[i] : null\r\n    }));\r\n\r\n    // Determine if current user is host\r\n    // TODO: Get actual current player ID from authentication\r\n    this.isHost = this.hostId === this.currentPlayerId;\r\n    \r\n    // Check if can start game\r\n    this.canStartGame = this.isHost && \r\n                       this.players.length >= 2 && \r\n                       this.players.every(p => p.isReady) &&\r\n                       this.gamePhase === 'waiting';\r\n\r\n    // Update current player info\r\n    if (room.gameState.currentPlayer) {\r\n      const currentPlayer = this.players.find(p => p.id === room.gameState.currentPlayer);\r\n      this.currentPlayerName = currentPlayer?.name || '';\r\n    }\r\n  }\r\n\r\n  private addChatMessage(playerName: string, text: string): void {\r\n    this.chatMessages.push({\r\n      playerName,\r\n      text,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  toggleReady() {\r\n    this.isPlayerReady = !this.isPlayerReady;\r\n    this.socketService.togglePlayerReady(this.roomCode);\r\n    console.log('Player ready status:', this.isPlayerReady);\r\n  }\r\n\r\n  startGame() {\r\n    if (!this.canStartGame) return;\r\n    \r\n    this.socketService.startGame(this.roomCode);\r\n    console.log('Starting game...');\r\n  }\r\n\r\n  sendChatMessage() {\r\n    if (!this.chatInput.trim()) return;\r\n\r\n    this.socketService.sendChatMessage(this.roomCode, this.chatInput.trim());\r\n    this.chatInput = '';\r\n  }\r\n\r\n  leaveRoom() {\r\n    if (confirm('Are you sure you want to leave the room?')) {\r\n      this.socketService.leaveRoom(this.roomCode);\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}