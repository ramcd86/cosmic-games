{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet GameRoomComponent = class GameRoomComponent {\n  constructor(route, router, gameApiService, socketService) {\n    this.route = route;\n    this.router = router;\n    this.gameApiService = gameApiService;\n    this.socketService = socketService;\n    this.roomCode = '';\n    this.roomName = 'Cosmic Game Room';\n    this.gamePhase = 'waiting';\n    this.isReconnecting = false;\n    // Real game data\n    this.currentRoom = null;\n    this.players = [];\n    // Game state\n    this.myCards = [];\n    this.opponentCards = 0;\n    this.discardPile = [];\n    this.deckCount = 0;\n    // Subscriptions\n    this.subscriptions = [];\n    this.playerSlots = [];\n    this.currentPlayerId = '';\n    this.currentPlayerName = '';\n    this.hostId = '';\n    this.isHost = false;\n    this.isPlayerReady = false;\n    this.canStartGame = false;\n    this.myPlayerId = ''; // Track which player this client represents  \n    this.myPlayerName = ''; // Track this client's player name\n    // Player color themes for visual differentiation - now synchronized with board icons\n    this.playerColors = [{\n      frame: 'border-red-500 bg-red-500/10',\n      name: 'text-red-400',\n      bgColor: 'hsl(0, 65%, 50%)'\n    },\n    // Red\n    {\n      frame: 'border-orange-500 bg-orange-500/10',\n      name: 'text-orange-400',\n      bgColor: 'hsl(30, 65%, 50%)'\n    },\n    // Orange  \n    {\n      frame: 'border-yellow-500 bg-yellow-500/10',\n      name: 'text-yellow-400',\n      bgColor: 'hsl(60, 65%, 50%)'\n    },\n    // Yellow\n    {\n      frame: 'border-green-500 bg-green-500/10',\n      name: 'text-green-400',\n      bgColor: 'hsl(120, 65%, 50%)'\n    },\n    // Green\n    {\n      frame: 'border-cyan-500 bg-cyan-500/10',\n      name: 'text-cyan-400',\n      bgColor: 'hsl(180, 65%, 50%)'\n    },\n    // Cyan\n    {\n      frame: 'border-blue-500 bg-blue-500/10',\n      name: 'text-blue-400',\n      bgColor: 'hsl(240, 65%, 50%)'\n    },\n    // Blue\n    {\n      frame: 'border-purple-500 bg-purple-500/10',\n      name: 'text-purple-400',\n      bgColor: 'hsl(270, 65%, 50%)'\n    },\n    // Purple\n    {\n      frame: 'border-pink-500 bg-pink-500/10',\n      name: 'text-pink-400',\n      bgColor: 'hsl(300, 65%, 50%)'\n    } // Magenta\n    ];\n    // Room settings\n    this.maxPlayers = 6;\n    this.gameVariant = 'classic';\n    this.turnTimeLimit = 30;\n    this.pointLimit = 100;\n    // Chat\n    this.chatMessages = [];\n    this.chatInput = '';\n    // Leave room confirmation\n    this.showLeaveConfirmation = false;\n  }\n  ngOnInit() {\n    this.roomCode = this.route.snapshot.params['code'];\n    console.log('Joining room:', this.roomCode);\n    // Check if this is a reconnection\n    const storedRoomCode = localStorage.getItem('activeRoomCode');\n    this.isReconnecting = storedRoomCode === this.roomCode;\n    if (this.isReconnecting) {\n      console.log('🔄 Reconnecting to existing session...');\n    }\n    // Get player name from localStorage (should be set when joining/creating room)\n    this.myPlayerName = localStorage.getItem('currentPlayerName') || 'Player';\n    // Connect to WebSocket\n    this.socketService.connect();\n    // Subscribe to real-time updates\n    this.setupSocketSubscriptions();\n    // Join the room via socket (important for session tracking)\n    this.socketService.joinRoom(this.roomCode, this.myPlayerName);\n    // Load room data\n    this.loadRoomData();\n  }\n  ngOnDestroy() {\n    // Cleanup subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    // Leave room and disconnect socket\n    if (this.roomCode) {\n      this.socketService.leaveRoom(this.roomCode);\n    }\n    this.socketService.disconnect();\n    // Don't clear session here as user might want to rejoin\n    // Session will be cleared when they start a new game or manually clear it\n  }\n  setupSocketSubscriptions() {\n    // Room updates\n    this.subscriptions.push(this.socketService.roomUpdated$.subscribe(room => {\n      if (room) {\n        this.updateRoomData(room);\n        this.updateSessionActivity(); // Keep session fresh\n      }\n    }));\n    // Game updates\n    this.subscriptions.push(this.socketService.gameUpdated$.subscribe(gameState => {\n      if (gameState && this.currentRoom) {\n        this.currentRoom.gameState = gameState;\n        this.gamePhase = gameState.phase;\n      }\n    }));\n    // Player joined\n    this.subscriptions.push(this.socketService.playerJoined$.subscribe(player => {\n      if (player && this.currentRoom) {\n        // Player already added via room update, just show notification\n        this.addChatMessage('System', `${player.name} joined the room`);\n      }\n    }));\n    // Player left\n    this.subscriptions.push(this.socketService.playerLeft$.subscribe(playerId => {\n      if (playerId && this.currentRoom) {\n        const player = this.currentRoom.players.find(p => p.id === playerId);\n        if (player) {\n          this.addChatMessage('System', `${player.name} left the room`);\n        }\n      }\n    }));\n    // Chat messages\n    this.subscriptions.push(this.socketService.chatReceived$.subscribe(chat => {\n      if (chat) {\n        this.addChatMessage(chat.playerName, chat.message);\n      }\n    }));\n    // Errors\n    this.subscriptions.push(this.socketService.error$.subscribe(error => {\n      if (error) {\n        console.error('Socket error:', error);\n        this.addChatMessage('System', `Error: ${error}`);\n      }\n    }));\n    // Game started\n    this.subscriptions.push(this.socketService.gameStarted$.subscribe(started => {\n      if (started) {\n        this.gamePhase = 'playing';\n        this.addChatMessage('System', 'Game started!');\n      }\n    }));\n  }\n  loadRoomData() {\n    this.gameApiService.getRoom(this.roomCode).subscribe({\n      next: response => {\n        if (response.success && response.data) {\n          this.updateRoomData(response.data);\n        } else {\n          console.error('Failed to load room:', response.error);\n          this.router.navigate(['/']);\n        }\n      },\n      error: error => {\n        console.error('Error loading room:', error);\n        this.router.navigate(['/']);\n      }\n    });\n  }\n  updateRoomData(room) {\n    this.currentRoom = room;\n    this.roomName = room.name;\n    this.players = room.players;\n    this.hostId = room.hostId;\n    this.gamePhase = room.gameState.phase;\n    this.maxPlayers = room.settings.maxPlayers;\n    this.gameVariant = room.settings.gameVariant;\n    this.turnTimeLimit = room.settings.turnTimeLimit;\n    this.pointLimit = room.settings.pointLimit;\n    // Find current player by name\n    const myPlayer = this.players.find(p => p.name === this.myPlayerName);\n    if (myPlayer) {\n      this.myPlayerId = myPlayer.id;\n      this.isPlayerReady = myPlayer.isReady;\n    }\n    // Update player slots\n    this.playerSlots = Array(this.maxPlayers).fill(null).map((_, i) => ({\n      index: i,\n      player: i < this.players.length ? this.players[i] : null\n    }));\n    // Determine if current user is host\n    this.isHost = this.hostId === this.myPlayerId;\n    // Check if can start game\n    this.canStartGame = this.isHost && this.players.length >= 2 && this.players.every(p => p.isReady) && this.gamePhase === 'waiting';\n    // Update current player info for game state\n    if (room.gameState.currentPlayer) {\n      this.currentPlayerId = room.gameState.currentPlayer;\n      const currentPlayer = this.players.find(p => p.id === room.gameState.currentPlayer);\n      this.currentPlayerName = currentPlayer?.name || '';\n    }\n    // Update game data for display\n    if (this.gamePhase === 'playing') {\n      // Get my cards\n      const myPlayer = this.players.find(p => p.id === this.myPlayerId);\n      this.myCards = myPlayer?.cards || [];\n      // Count opponent cards (for display purposes)\n      const opponents = this.players.filter(p => p.id !== this.myPlayerId);\n      this.opponentCards = opponents.length > 0 ? opponents[0].cards.length : 0;\n      // Game state data\n      this.discardPile = room.gameState.discardPile || [];\n      this.deckCount = room.gameState.deck?.length || 0;\n    }\n    console.log('Room updated. My player:', {\n      id: this.myPlayerId,\n      name: this.myPlayerName,\n      ready: this.isPlayerReady\n    });\n  }\n  addChatMessage(playerName, text) {\n    this.chatMessages.push({\n      playerName,\n      text,\n      timestamp: new Date()\n    });\n  }\n  /**\n   * Get color theme for a player based on their index\n   */\n  getPlayerColorTheme(playerIndex) {\n    return this.playerColors[playerIndex % this.playerColors.length];\n  }\n  /**\n   * Get frame class for a player slot\n   */\n  getPlayerFrameClass(slot) {\n    if (!slot.player) return '';\n    const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\n    const theme = this.getPlayerColorTheme(playerIndex);\n    return theme.frame;\n  }\n  /**\n   * Get name class for a player slot\n   */\n  getPlayerNameClass(slot) {\n    if (!slot.player) return 'text-casino-gold';\n    const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\n    const theme = this.getPlayerColorTheme(playerIndex);\n    return theme.name;\n  }\n  toggleReady() {\n    // Don't optimistically update - wait for server confirmation\n    this.socketService.togglePlayerReady(this.roomCode);\n    console.log('Requesting ready status toggle...');\n  }\n  startGame() {\n    if (!this.canStartGame) return;\n    this.socketService.startGame(this.roomCode);\n    console.log('Starting game...');\n  }\n  sendChatMessage() {\n    if (!this.chatInput.trim()) return;\n    this.socketService.sendChatMessage(this.roomCode, this.chatInput.trim());\n    this.chatInput = '';\n  }\n  leaveRoom() {\n    console.log('🚪 Showing leave room confirmation...');\n    this.showLeaveConfirmation = true;\n  }\n  cancelLeaveRoom() {\n    console.log('🚫 Leave room cancelled by user');\n    this.showLeaveConfirmation = false;\n  }\n  confirmLeaveRoom() {\n    console.log('🚪 Leaving room:', this.roomCode);\n    this.showLeaveConfirmation = false;\n    // Clear session data when leaving\n    localStorage.removeItem('activeRoomCode');\n    localStorage.removeItem('sessionTimestamp');\n    localStorage.removeItem('sessionIsAIOnly');\n    localStorage.removeItem('currentPlayerName');\n    console.log('🧹 Session data cleared');\n    try {\n      // Leave room via socket\n      this.socketService.leaveRoom(this.roomCode);\n      console.log('📡 Socket leave room called');\n      // Navigate back to home\n      this.router.navigate(['/']);\n      console.log('🏠 Navigation to home initiated');\n    } catch (error) {\n      console.error('❌ Error leaving room:', error);\n      // Still try to navigate home even if socket fails\n      this.router.navigate(['/']);\n    }\n  }\n  /**\n   * Get display string for a card\n   */\n  getCardDisplay(card) {\n    if (!card) return '';\n    // Card suit symbols\n    const suitSymbols = {\n      'hearts': '♥',\n      'diamonds': '♦',\n      'clubs': '♣',\n      'spades': '♠'\n    };\n    const suit = suitSymbols[card.suit] || card.suit;\n    return `${card.rank}${suit}`;\n  }\n  getCardRank(card) {\n    return card?.rank || '';\n  }\n  getCardSuit(card) {\n    const suitSymbols = {\n      'hearts': '♥',\n      'diamonds': '♦',\n      'clubs': '♣',\n      'spades': '♠'\n    };\n    return suitSymbols[card?.suit] || card?.suit || '';\n  }\n  getCardColor(card) {\n    if (!card) return 'black';\n    return card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black';\n  }\n  updateSessionActivity() {\n    // Update session timestamp to keep it fresh\n    const currentRoomCode = localStorage.getItem('activeRoomCode');\n    if (currentRoomCode === this.roomCode) {\n      localStorage.setItem('sessionTimestamp', Date.now().toString());\n      // Store room composition info for smarter timeout calculation\n      if (this.currentRoom) {\n        const humanPlayers = this.currentRoom.players.filter(p => !p.isAI);\n        const isAIOnly = humanPlayers.length <= 1; // Only this player or less\n        localStorage.setItem('sessionIsAIOnly', isAIOnly.toString());\n      }\n    }\n  }\n  generatePlayerInitials(name, allPlayers) {\n    // Get all other player names for collision detection\n    const otherNames = allPlayers.filter(p => p.name !== name).map(p => p.name);\n    // Start with first character\n    let initials = name.charAt(0).toUpperCase();\n    // Check if any other player starts with the same character\n    const sameFirstChar = otherNames.some(otherName => otherName.charAt(0).toUpperCase() === initials);\n    // If collision, add second character\n    if (sameFirstChar && name.length > 1) {\n      initials += name.charAt(1).toUpperCase();\n    }\n    return initials;\n  }\n  getPlayerPositionClass(index, totalPlayers) {\n    const positions = ['player-bottom',\n    // Current player always at bottom\n    'player-top',\n    // Second player at top\n    'player-right',\n    // Third player at right\n    'player-left',\n    // Fourth player at left\n    'player-top-right',\n    // Fifth player at top-right\n    'player-top-left',\n    // Sixth player at top-left\n    'player-bottom-right',\n    // Seventh player at bottom-right\n    'player-bottom-left' // Eighth player at bottom-left\n    ];\n    return positions[index] || 'player-top';\n  }\n  getPlayerBackgroundColor(playerName, playerIndex) {\n    if (playerIndex !== undefined) {\n      // Use consistent colors based on player index for synchronization\n      const hues = [0, 30, 60, 120, 180, 240, 270, 300]; // Red, Orange, Yellow, Green, Cyan, Blue, Purple, Magenta\n      const hue = hues[playerIndex % hues.length];\n      return `hsl(${hue}, 65%, 50%)`;\n    }\n    // Fallback to name-based hash (for backward compatibility)\n    let hash = 0;\n    for (let i = 0; i < playerName.length; i++) {\n      hash = playerName.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    // Create HSL color with good saturation and lightness for visibility\n    const hue = Math.abs(hash) % 360;\n    return `hsl(${hue}, 65%, 50%)`;\n  }\n  getCurrentPlayerTurnStatus(playerId) {\n    // Check if it's this player's turn based on the current game state\n    if (this.currentRoom && this.currentRoom.gameState.currentPlayer === playerId) {\n      return 'active-turn';\n    }\n    return '';\n  }\n};\nGameRoomComponent = __decorate([Component({\n  selector: 'app-game-room',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <div class=\"max-w-6xl mx-auto\">\n      <!-- Room Header -->\n      <div class=\"casino-panel mb-6\">\n        <div class=\"flex justify-between items-center\">\n          <div>\n            <h1 class=\"text-2xl font-bold text-gold\">{{ roomName }}</h1>\n            <p class=\"text-casino-silver\">Room Code: <span class=\"font-mono text-casino-gold\">{{ roomCode }}</span></p>\n          </div>\n          <button \n            (click)=\"leaveRoom()\"\n            class=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\">\n            Leave Room\n          </button>\n        </div>\n      </div>\n\n      <div class=\"grid lg:grid-cols-4 gap-6\">\n        <!-- Game Area -->\n        <div class=\"lg:col-span-3\">\n          <div class=\"casino-table p-8 mb-6\">\n            <div class=\"text-center mb-8\">\n              <h2 class=\"text-3xl font-bold text-casino-silver mb-2\">\n                {{ gamePhase === 'waiting' ? 'Waiting for Players' : \n                   gamePhase === 'playing' ? 'Game in Progress' : 'Game Finished' }}\n              </h2>\n              \n              <div *ngIf=\"gamePhase === 'waiting'\" class=\"text-casino-silver/80\">\n                Waiting for all players to be ready...\n              </div>\n              \n              <div *ngIf=\"gamePhase === 'playing' && currentPlayerName\" class=\"text-casino-gold\">\n                {{ currentPlayerName }}'s turn\n              </div>\n            </div>\n\n            <!-- Waiting Screen -->\n            <div *ngIf=\"gamePhase === 'waiting'\" class=\"text-center\">\n              <div class=\"grid grid-cols-2 md:grid-cols-3 gap-4 max-w-md mx-auto\">\n                <div \n                  *ngFor=\"let slot of playerSlots\" \n                  class=\"casino-panel p-4 text-center min-h-[100px] flex flex-col justify-center transition-all duration-300\"\n                  [ngClass]=\"getPlayerFrameClass(slot)\">\n                  <div *ngIf=\"slot.player; else emptySlot\">\n                    <div class=\"text-lg font-bold transition-colors duration-300\" \n                         [ngClass]=\"getPlayerNameClass(slot)\">\n                      {{ slot.player.name }}\n                    </div>\n                    <div class=\"text-sm\" [class]=\"slot.player.isReady ? 'text-green-400' : 'text-yellow-400'\">\n                      {{ slot.player.isReady ? '✓ Ready' : '⏳ Not Ready' }}\n                    </div>\n                    <div *ngIf=\"slot.player.isAI\" class=\"text-xs text-casino-silver/60\">\n                      🤖 AI Player ({{ slot.player.difficulty }})\n                    </div>\n                  </div>\n                  <ng-template #emptySlot>\n                    <div class=\"text-casino-silver/50\">\n                      <div class=\"text-2xl mb-2\">👤</div>\n                      <div class=\"text-sm\">Empty Slot</div>\n                    </div>\n                  </ng-template>\n                </div>\n              </div>\n\n              <div class=\"mt-8 space-y-4\">\n                <button \n                  *ngIf=\"!isPlayerReady\"\n                  (click)=\"toggleReady()\"\n                  class=\"casino-button mr-4\">\n                  Ready Up\n                </button>\n                \n                <button \n                  *ngIf=\"isPlayerReady\"\n                  (click)=\"toggleReady()\"\n                  class=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg mr-4\">\n                  Not Ready\n                </button>\n\n                <button \n                  *ngIf=\"isHost && canStartGame\"\n                  (click)=\"startGame()\"\n                  class=\"casino-button\">\n                  Start Game\n                </button>\n              </div>\n            </div>\n\n            <!-- Game Screen -->\n            <div *ngIf=\"gamePhase === 'playing'\" class=\"space-y-6\">\n              <!-- Table with Players Around It -->\n              <div class=\"table-container\">\n                <div class=\"players-around-table\">\n                  <!-- Players positioned around the table -->\n                  <div \n                    *ngFor=\"let player of players; let i = index\" \n                    class=\"player-position\"\n                    [ngClass]=\"getPlayerPositionClass(i, players.length)\">\n                    <div \n                      class=\"player-circle\"\n                      [style.background-color]=\"getPlayerBackgroundColor(player.name, i)\"\n                      [ngClass]=\"getCurrentPlayerTurnStatus(player.id)\">\n                      {{ generatePlayerInitials(player.name, players) }}\n                    </div>\n                  </div>\n                  \n                  <!-- Game Table -->\n                  <div class=\"game-table\">\n                    <!-- Center Area with Deck and Discard -->\n                    <div class=\"flex justify-center space-x-8\">\n                      <!-- Deck -->\n                      <div class=\"text-center\">\n                        <div class=\"w-16 h-24 bg-casino-charcoal rounded border-2 border-casino-gold cursor-pointer hover:scale-105 transition-transform flex items-center justify-center\">\n                          <span class=\"text-casino-gold text-sm\">🂠</span>\n                        </div>\n                        <p class=\"text-white text-xs mt-1\">{{ deckCount }}</p>\n                      </div>\n\n                      <!-- Discard Pile -->\n                      <div class=\"text-center\">\n                        <div class=\"discard-card card-style cursor-pointer hover:scale-105 transition-transform\" [ngClass]=\"discardPile.length > 0 ? (getCardColor(discardPile[discardPile.length - 1]) === 'red' ? 'card-red' : 'card-black') : ''\">\n                          <div *ngIf=\"discardPile.length > 0\">\n                            <div class=\"card-rank\">\n                              {{ getCardRank(discardPile[discardPile.length - 1]) }}\n                            </div>\n                            <div class=\"card-suit\">\n                              {{ getCardSuit(discardPile[discardPile.length - 1]) }}\n                            </div>\n                          </div>\n                          <span *ngIf=\"discardPile.length === 0\" class=\"absolute inset-0 flex items-center justify-center text-gray-400 text-xs\">Empty</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Player Hand -->\n              <div class=\"flex justify-center space-x-1\">\n                <div \n                  *ngFor=\"let card of myCards; let i = index\" \n                  class=\"hand-card card-style cursor-pointer hover:scale-105 hover:-translate-y-2 transition-all\"\n                  [ngClass]=\"getCardColor(card) === 'red' ? 'card-red' : 'card-black'\">\n                  <div class=\"card-rank\">\n                    {{ getCardRank(card) }}\n                  </div>\n                  <div class=\"card-suit\">\n                    {{ getCardSuit(card) }}\n                  </div>\n                </div>\n              </div>\n\n              <!-- Game Actions -->\n              <div class=\"text-center space-x-4\">\n                <button class=\"casino-button\">Draw</button>\n                <button class=\"bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg\">Knock</button>\n                <button class=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg\">Gin</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Sidebar -->\n        <div class=\"space-y-6\">\n          <!-- Players List -->\n          <div class=\"casino-panel\">\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Players</h3>\n            <div class=\"space-y-2\">\n              <div \n                *ngFor=\"let player of players; let i = index\" \n                class=\"flex justify-between items-center p-3 rounded-lg transition-all duration-300 border-2\"\n                [class]=\"getCurrentPlayerTurnStatus(player.id) === 'active-turn' ? 'bg-casino-gold/20 border-casino-gold' : 'border-transparent'\"\n                [ngClass]=\"getPlayerColorTheme(i).frame\">\n                <div class=\"flex items-center space-x-3\">\n                  <!-- Player Circle Icon (matching board) -->\n                  <div class=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold\"\n                       [style.background-color]=\"getPlayerBackgroundColor(player.name, i)\">\n                    {{ generatePlayerInitials(player.name, players) }}\n                  </div>\n                  <div>\n                    <div class=\"font-medium transition-colors duration-300 flex items-center space-x-2\" \n                         [ngClass]=\"getPlayerColorTheme(i).name\">\n                      <span>{{ player.name }}</span>\n                      <span *ngIf=\"player.id === hostId\" class=\"text-casino-gold text-xs\">👑</span>\n                      <span *ngIf=\"player.isAI\" class=\"text-xs\">🤖</span>\n                      <span *ngIf=\"getCurrentPlayerTurnStatus(player.id) === 'active-turn'\" class=\"text-green-400 text-sm\">✓</span>\n                    </div>\n                    <div class=\"text-sm text-casino-silver/60\">\n                      Score: {{ player.score }}\n                      <span *ngIf=\"player.isAI\"> | {{ player.difficulty }}</span>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"text-sm\">\n                  <span \n                    *ngIf=\"player.isConnected\" \n                    class=\"text-green-400\">●</span>\n                  <span \n                    *ngIf=\"!player.isConnected\" \n                    class=\"text-red-400\">●</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Chat -->\n          <div class=\"casino-panel\">\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Chat</h3>\n            <div class=\"space-y-2 max-h-40 overflow-y-auto mb-4\">\n              <div \n                *ngFor=\"let message of chatMessages\" \n                class=\"text-sm\">\n                <span class=\"text-casino-gold font-medium\">{{ message.playerName }}:</span>\n                <span class=\"text-casino-silver ml-1\">{{ message.text }}</span>\n              </div>\n            </div>\n            \n            <form (ngSubmit)=\"sendChatMessage()\" class=\"flex gap-2\">\n              <input \n                [(ngModel)]=\"chatInput\"\n                name=\"chatInput\"\n                type=\"text\" \n                class=\"casino-input flex-1 text-sm\"\n                placeholder=\"Type a message...\"\n                maxlength=\"100\">\n              <button \n                type=\"submit\"\n                [disabled]=\"!chatInput.trim()\"\n                class=\"bg-casino-gold text-casino-black px-3 py-1 rounded text-sm hover:bg-casino-bronze transition-colors\">\n                Send\n              </button>\n            </form>\n          </div>\n\n          <!-- Room Settings -->\n          <div class=\"casino-panel\">\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Settings</h3>\n            <div class=\"space-y-2 text-sm\">\n              <div class=\"flex justify-between\">\n                <span class=\"text-casino-silver\">Max Players:</span>\n                <span class=\"text-casino-gold\">{{ maxPlayers }}</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-casino-silver\">Game Variant:</span>\n                <span class=\"text-casino-gold\">{{ gameVariant }}</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-casino-silver\">Turn Limit:</span>\n                <span class=\"text-casino-gold\">{{ turnTimeLimit }}s</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-casino-silver\">Point Limit:</span>\n                <span class=\"text-casino-gold\">{{ pointLimit }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Leave Room Confirmation Modal -->\n    <div *ngIf=\"showLeaveConfirmation\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" (click)=\"cancelLeaveRoom()\">\n      <div class=\"casino-panel max-w-md w-full mx-4\" (click)=\"$event.stopPropagation()\">\n        <div class=\"text-center\">\n          <div class=\"text-6xl mb-4\">🚪</div>\n          <h3 class=\"text-xl font-bold text-casino-gold mb-2\">Leave Room?</h3>\n          <p class=\"text-casino-silver mb-6\">\n            Are you sure you want to leave <span class=\"text-casino-gold font-semibold\">{{ roomName }}</span>?\n            <br><span class=\"text-sm text-casino-silver/70\">This action cannot be undone.</span>\n          </p>\n          \n          <div class=\"flex space-x-3\">\n            <button \n              (click)=\"cancelLeaveRoom()\"\n              class=\"flex-1 bg-gray-600 hover:bg-gray-700 text-white px-4 py-3 rounded-lg transition-colors font-medium\">\n              Cancel\n            </button>\n            <button \n              (click)=\"confirmLeaveRoom()\"\n              class=\"flex-1 bg-red-600 hover:bg-red-700 text-white px-4 py-3 rounded-lg transition-colors font-medium\">\n              Leave Room\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  `,\n  styles: [`\n    .card-style {\n      background: white;\n      border-radius: 8px;\n      position: relative;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      overflow: hidden;\n    }\n    \n    .card-rank {\n      position: absolute;\n      top: 6px;\n      left: 6px;\n      font-weight: bold;\n      font-size: 0.875rem;\n      line-height: 1;\n    }\n    \n    .card-suit {\n      position: absolute;\n      bottom: 6px;\n      right: 6px;\n      font-weight: bold;\n      font-size: 1.125rem;\n      line-height: 1;\n    }\n    \n    .card-red {\n      color: #dc2626;\n      border: 2px solid #dc2626;\n      box-shadow: inset 0 0 0 1px #dc2626;\n    }\n    \n    .card-black {\n      color: #1f2937;\n      border: 2px solid #1f2937;\n      box-shadow: inset 0 0 0 1px #1f2937;\n    }\n    \n    .hand-card {\n      width: 3rem;\n      height: 4rem;\n    }\n    \n    .discard-card {\n      width: 4rem;\n      height: 6rem;\n    }\n    \n    .discard-card .card-rank {\n      font-size: 1rem;\n      top: 8px;\n      left: 8px;\n    }\n    \n    .discard-card .card-suit {\n      font-size: 1.25rem;\n      bottom: 8px;\n      right: 8px;\n    }\n\n    .player-circle {\n      width: 60px;\n      height: 60px;\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-weight: bold;\n      font-size: 0.875rem;\n      color: white;\n      position: relative;\n      border: 3px solid rgba(255, 255, 255, 0.3);\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n    }\n\n    .player-circle.active-turn::after {\n      content: '✓';\n      position: absolute;\n      bottom: -8px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: #10b981;\n      color: white;\n      border-radius: 50%;\n      width: 18px;\n      height: 18px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 12px;\n      font-weight: bold;\n      border: 2px solid white;\n    }\n\n    .table-container {\n      position: relative;\n      width: 100%;\n      max-width: 600px;\n      margin: 0 auto;\n    }\n\n    .players-around-table {\n      position: relative;\n      width: 100%;\n      height: 400px;\n    }\n\n    .player-position {\n      position: absolute;\n    }\n\n    .player-top {\n      top: 10px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n\n    .player-top-right {\n      top: 30px;\n      right: 30px;\n    }\n\n    .player-right {\n      top: 50%;\n      right: 10px;\n      transform: translateY(-50%);\n    }\n\n    .player-bottom-right {\n      bottom: 30px;\n      right: 30px;\n    }\n\n    .player-bottom {\n      bottom: 10px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n\n    .player-bottom-left {\n      bottom: 30px;\n      left: 30px;\n    }\n\n    .player-left {\n      top: 50%;\n      left: 10px;\n      transform: translateY(-50%);\n    }\n\n    .player-top-left {\n      top: 30px;\n      left: 30px;\n    }\n\n    .game-table {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      width: 300px;\n      height: 200px;\n      background: linear-gradient(135deg, #0f5132, #198754);\n      border-radius: 100px;\n      border: 4px solid #ffd700;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.3), 0 4px 16px rgba(0, 0, 0, 0.3);\n    }\n  `]\n})], GameRoomComponent);\nexport { GameRoomComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","GameRoomComponent","constructor","route","router","gameApiService","socketService","roomCode","roomName","gamePhase","isReconnecting","currentRoom","players","myCards","opponentCards","discardPile","deckCount","subscriptions","playerSlots","currentPlayerId","currentPlayerName","hostId","isHost","isPlayerReady","canStartGame","myPlayerId","myPlayerName","playerColors","frame","name","bgColor","maxPlayers","gameVariant","turnTimeLimit","pointLimit","chatMessages","chatInput","showLeaveConfirmation","ngOnInit","snapshot","params","console","log","storedRoomCode","localStorage","getItem","connect","setupSocketSubscriptions","joinRoom","loadRoomData","ngOnDestroy","forEach","sub","unsubscribe","leaveRoom","disconnect","push","roomUpdated$","subscribe","room","updateRoomData","updateSessionActivity","gameUpdated$","gameState","phase","playerJoined$","player","addChatMessage","playerLeft$","playerId","find","p","id","chatReceived$","chat","playerName","message","error$","error","gameStarted$","started","getRoom","next","response","success","data","navigate","settings","myPlayer","isReady","Array","fill","map","_","i","index","length","every","currentPlayer","cards","opponents","filter","deck","ready","text","timestamp","Date","getPlayerColorTheme","playerIndex","getPlayerFrameClass","slot","findIndex","theme","getPlayerNameClass","toggleReady","togglePlayerReady","startGame","sendChatMessage","trim","cancelLeaveRoom","confirmLeaveRoom","removeItem","getCardDisplay","card","suitSymbols","suit","rank","getCardRank","getCardSuit","getCardColor","currentRoomCode","setItem","now","toString","humanPlayers","isAI","isAIOnly","generatePlayerInitials","allPlayers","otherNames","initials","charAt","toUpperCase","sameFirstChar","some","otherName","getPlayerPositionClass","totalPlayers","positions","getPlayerBackgroundColor","undefined","hues","hue","hash","charCodeAt","Math","abs","getCurrentPlayerTurnStatus","__decorate","selector","standalone","imports","template","styles"],"sources":["C:\\_dev\\cosmic-games\\frontend\\src\\app\\pages\\game-room\\game-room.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { GameApiService } from '../../services/game-api.service';\r\nimport { SocketService } from '../../services/socket.service';\r\nimport { GameRoom, Player, Card } from '@cosmic-games/shared';\r\n\r\n@Component({\r\n  selector: 'app-game-room',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Room Header -->\r\n      <div class=\"casino-panel mb-6\">\r\n        <div class=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 class=\"text-2xl font-bold text-gold\">{{ roomName }}</h1>\r\n            <p class=\"text-casino-silver\">Room Code: <span class=\"font-mono text-casino-gold\">{{ roomCode }}</span></p>\r\n          </div>\r\n          <button \r\n            (click)=\"leaveRoom()\"\r\n            class=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\">\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"grid lg:grid-cols-4 gap-6\">\r\n        <!-- Game Area -->\r\n        <div class=\"lg:col-span-3\">\r\n          <div class=\"casino-table p-8 mb-6\">\r\n            <div class=\"text-center mb-8\">\r\n              <h2 class=\"text-3xl font-bold text-casino-silver mb-2\">\r\n                {{ gamePhase === 'waiting' ? 'Waiting for Players' : \r\n                   gamePhase === 'playing' ? 'Game in Progress' : 'Game Finished' }}\r\n              </h2>\r\n              \r\n              <div *ngIf=\"gamePhase === 'waiting'\" class=\"text-casino-silver/80\">\r\n                Waiting for all players to be ready...\r\n              </div>\r\n              \r\n              <div *ngIf=\"gamePhase === 'playing' && currentPlayerName\" class=\"text-casino-gold\">\r\n                {{ currentPlayerName }}'s turn\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Waiting Screen -->\r\n            <div *ngIf=\"gamePhase === 'waiting'\" class=\"text-center\">\r\n              <div class=\"grid grid-cols-2 md:grid-cols-3 gap-4 max-w-md mx-auto\">\r\n                <div \r\n                  *ngFor=\"let slot of playerSlots\" \r\n                  class=\"casino-panel p-4 text-center min-h-[100px] flex flex-col justify-center transition-all duration-300\"\r\n                  [ngClass]=\"getPlayerFrameClass(slot)\">\r\n                  <div *ngIf=\"slot.player; else emptySlot\">\r\n                    <div class=\"text-lg font-bold transition-colors duration-300\" \r\n                         [ngClass]=\"getPlayerNameClass(slot)\">\r\n                      {{ slot.player.name }}\r\n                    </div>\r\n                    <div class=\"text-sm\" [class]=\"slot.player.isReady ? 'text-green-400' : 'text-yellow-400'\">\r\n                      {{ slot.player.isReady ? '✓ Ready' : '⏳ Not Ready' }}\r\n                    </div>\r\n                    <div *ngIf=\"slot.player.isAI\" class=\"text-xs text-casino-silver/60\">\r\n                      🤖 AI Player ({{ slot.player.difficulty }})\r\n                    </div>\r\n                  </div>\r\n                  <ng-template #emptySlot>\r\n                    <div class=\"text-casino-silver/50\">\r\n                      <div class=\"text-2xl mb-2\">👤</div>\r\n                      <div class=\"text-sm\">Empty Slot</div>\r\n                    </div>\r\n                  </ng-template>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mt-8 space-y-4\">\r\n                <button \r\n                  *ngIf=\"!isPlayerReady\"\r\n                  (click)=\"toggleReady()\"\r\n                  class=\"casino-button mr-4\">\r\n                  Ready Up\r\n                </button>\r\n                \r\n                <button \r\n                  *ngIf=\"isPlayerReady\"\r\n                  (click)=\"toggleReady()\"\r\n                  class=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg mr-4\">\r\n                  Not Ready\r\n                </button>\r\n\r\n                <button \r\n                  *ngIf=\"isHost && canStartGame\"\r\n                  (click)=\"startGame()\"\r\n                  class=\"casino-button\">\r\n                  Start Game\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Game Screen -->\r\n            <div *ngIf=\"gamePhase === 'playing'\" class=\"space-y-6\">\r\n              <!-- Table with Players Around It -->\r\n              <div class=\"table-container\">\r\n                <div class=\"players-around-table\">\r\n                  <!-- Players positioned around the table -->\r\n                  <div \r\n                    *ngFor=\"let player of players; let i = index\" \r\n                    class=\"player-position\"\r\n                    [ngClass]=\"getPlayerPositionClass(i, players.length)\">\r\n                    <div \r\n                      class=\"player-circle\"\r\n                      [style.background-color]=\"getPlayerBackgroundColor(player.name, i)\"\r\n                      [ngClass]=\"getCurrentPlayerTurnStatus(player.id)\">\r\n                      {{ generatePlayerInitials(player.name, players) }}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <!-- Game Table -->\r\n                  <div class=\"game-table\">\r\n                    <!-- Center Area with Deck and Discard -->\r\n                    <div class=\"flex justify-center space-x-8\">\r\n                      <!-- Deck -->\r\n                      <div class=\"text-center\">\r\n                        <div class=\"w-16 h-24 bg-casino-charcoal rounded border-2 border-casino-gold cursor-pointer hover:scale-105 transition-transform flex items-center justify-center\">\r\n                          <span class=\"text-casino-gold text-sm\">🂠</span>\r\n                        </div>\r\n                        <p class=\"text-white text-xs mt-1\">{{ deckCount }}</p>\r\n                      </div>\r\n\r\n                      <!-- Discard Pile -->\r\n                      <div class=\"text-center\">\r\n                        <div class=\"discard-card card-style cursor-pointer hover:scale-105 transition-transform\" [ngClass]=\"discardPile.length > 0 ? (getCardColor(discardPile[discardPile.length - 1]) === 'red' ? 'card-red' : 'card-black') : ''\">\r\n                          <div *ngIf=\"discardPile.length > 0\">\r\n                            <div class=\"card-rank\">\r\n                              {{ getCardRank(discardPile[discardPile.length - 1]) }}\r\n                            </div>\r\n                            <div class=\"card-suit\">\r\n                              {{ getCardSuit(discardPile[discardPile.length - 1]) }}\r\n                            </div>\r\n                          </div>\r\n                          <span *ngIf=\"discardPile.length === 0\" class=\"absolute inset-0 flex items-center justify-center text-gray-400 text-xs\">Empty</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Player Hand -->\r\n              <div class=\"flex justify-center space-x-1\">\r\n                <div \r\n                  *ngFor=\"let card of myCards; let i = index\" \r\n                  class=\"hand-card card-style cursor-pointer hover:scale-105 hover:-translate-y-2 transition-all\"\r\n                  [ngClass]=\"getCardColor(card) === 'red' ? 'card-red' : 'card-black'\">\r\n                  <div class=\"card-rank\">\r\n                    {{ getCardRank(card) }}\r\n                  </div>\r\n                  <div class=\"card-suit\">\r\n                    {{ getCardSuit(card) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Game Actions -->\r\n              <div class=\"text-center space-x-4\">\r\n                <button class=\"casino-button\">Draw</button>\r\n                <button class=\"bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg\">Knock</button>\r\n                <button class=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg\">Gin</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Sidebar -->\r\n        <div class=\"space-y-6\">\r\n          <!-- Players List -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Players</h3>\r\n            <div class=\"space-y-2\">\r\n              <div \r\n                *ngFor=\"let player of players; let i = index\" \r\n                class=\"flex justify-between items-center p-3 rounded-lg transition-all duration-300 border-2\"\r\n                [class]=\"getCurrentPlayerTurnStatus(player.id) === 'active-turn' ? 'bg-casino-gold/20 border-casino-gold' : 'border-transparent'\"\r\n                [ngClass]=\"getPlayerColorTheme(i).frame\">\r\n                <div class=\"flex items-center space-x-3\">\r\n                  <!-- Player Circle Icon (matching board) -->\r\n                  <div class=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold\"\r\n                       [style.background-color]=\"getPlayerBackgroundColor(player.name, i)\">\r\n                    {{ generatePlayerInitials(player.name, players) }}\r\n                  </div>\r\n                  <div>\r\n                    <div class=\"font-medium transition-colors duration-300 flex items-center space-x-2\" \r\n                         [ngClass]=\"getPlayerColorTheme(i).name\">\r\n                      <span>{{ player.name }}</span>\r\n                      <span *ngIf=\"player.id === hostId\" class=\"text-casino-gold text-xs\">👑</span>\r\n                      <span *ngIf=\"player.isAI\" class=\"text-xs\">🤖</span>\r\n                      <span *ngIf=\"getCurrentPlayerTurnStatus(player.id) === 'active-turn'\" class=\"text-green-400 text-sm\">✓</span>\r\n                    </div>\r\n                    <div class=\"text-sm text-casino-silver/60\">\r\n                      Score: {{ player.score }}\r\n                      <span *ngIf=\"player.isAI\"> | {{ player.difficulty }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"text-sm\">\r\n                  <span \r\n                    *ngIf=\"player.isConnected\" \r\n                    class=\"text-green-400\">●</span>\r\n                  <span \r\n                    *ngIf=\"!player.isConnected\" \r\n                    class=\"text-red-400\">●</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Chat -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Chat</h3>\r\n            <div class=\"space-y-2 max-h-40 overflow-y-auto mb-4\">\r\n              <div \r\n                *ngFor=\"let message of chatMessages\" \r\n                class=\"text-sm\">\r\n                <span class=\"text-casino-gold font-medium\">{{ message.playerName }}:</span>\r\n                <span class=\"text-casino-silver ml-1\">{{ message.text }}</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <form (ngSubmit)=\"sendChatMessage()\" class=\"flex gap-2\">\r\n              <input \r\n                [(ngModel)]=\"chatInput\"\r\n                name=\"chatInput\"\r\n                type=\"text\" \r\n                class=\"casino-input flex-1 text-sm\"\r\n                placeholder=\"Type a message...\"\r\n                maxlength=\"100\">\r\n              <button \r\n                type=\"submit\"\r\n                [disabled]=\"!chatInput.trim()\"\r\n                class=\"bg-casino-gold text-casino-black px-3 py-1 rounded text-sm hover:bg-casino-bronze transition-colors\">\r\n                Send\r\n              </button>\r\n            </form>\r\n          </div>\r\n\r\n          <!-- Room Settings -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Settings</h3>\r\n            <div class=\"space-y-2 text-sm\">\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Max Players:</span>\r\n                <span class=\"text-casino-gold\">{{ maxPlayers }}</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Game Variant:</span>\r\n                <span class=\"text-casino-gold\">{{ gameVariant }}</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Turn Limit:</span>\r\n                <span class=\"text-casino-gold\">{{ turnTimeLimit }}s</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Point Limit:</span>\r\n                <span class=\"text-casino-gold\">{{ pointLimit }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Leave Room Confirmation Modal -->\r\n    <div *ngIf=\"showLeaveConfirmation\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" (click)=\"cancelLeaveRoom()\">\r\n      <div class=\"casino-panel max-w-md w-full mx-4\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"text-center\">\r\n          <div class=\"text-6xl mb-4\">🚪</div>\r\n          <h3 class=\"text-xl font-bold text-casino-gold mb-2\">Leave Room?</h3>\r\n          <p class=\"text-casino-silver mb-6\">\r\n            Are you sure you want to leave <span class=\"text-casino-gold font-semibold\">{{ roomName }}</span>?\r\n            <br><span class=\"text-sm text-casino-silver/70\">This action cannot be undone.</span>\r\n          </p>\r\n          \r\n          <div class=\"flex space-x-3\">\r\n            <button \r\n              (click)=\"cancelLeaveRoom()\"\r\n              class=\"flex-1 bg-gray-600 hover:bg-gray-700 text-white px-4 py-3 rounded-lg transition-colors font-medium\">\r\n              Cancel\r\n            </button>\r\n            <button \r\n              (click)=\"confirmLeaveRoom()\"\r\n              class=\"flex-1 bg-red-600 hover:bg-red-700 text-white px-4 py-3 rounded-lg transition-colors font-medium\">\r\n              Leave Room\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  `,\r\n  styles: [`\r\n    .card-style {\r\n      background: white;\r\n      border-radius: 8px;\r\n      position: relative;\r\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n      overflow: hidden;\r\n    }\r\n    \r\n    .card-rank {\r\n      position: absolute;\r\n      top: 6px;\r\n      left: 6px;\r\n      font-weight: bold;\r\n      font-size: 0.875rem;\r\n      line-height: 1;\r\n    }\r\n    \r\n    .card-suit {\r\n      position: absolute;\r\n      bottom: 6px;\r\n      right: 6px;\r\n      font-weight: bold;\r\n      font-size: 1.125rem;\r\n      line-height: 1;\r\n    }\r\n    \r\n    .card-red {\r\n      color: #dc2626;\r\n      border: 2px solid #dc2626;\r\n      box-shadow: inset 0 0 0 1px #dc2626;\r\n    }\r\n    \r\n    .card-black {\r\n      color: #1f2937;\r\n      border: 2px solid #1f2937;\r\n      box-shadow: inset 0 0 0 1px #1f2937;\r\n    }\r\n    \r\n    .hand-card {\r\n      width: 3rem;\r\n      height: 4rem;\r\n    }\r\n    \r\n    .discard-card {\r\n      width: 4rem;\r\n      height: 6rem;\r\n    }\r\n    \r\n    .discard-card .card-rank {\r\n      font-size: 1rem;\r\n      top: 8px;\r\n      left: 8px;\r\n    }\r\n    \r\n    .discard-card .card-suit {\r\n      font-size: 1.25rem;\r\n      bottom: 8px;\r\n      right: 8px;\r\n    }\r\n\r\n    .player-circle {\r\n      width: 60px;\r\n      height: 60px;\r\n      border-radius: 50%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-weight: bold;\r\n      font-size: 0.875rem;\r\n      color: white;\r\n      position: relative;\r\n      border: 3px solid rgba(255, 255, 255, 0.3);\r\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\r\n    }\r\n\r\n    .player-circle.active-turn::after {\r\n      content: '✓';\r\n      position: absolute;\r\n      bottom: -8px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      background: #10b981;\r\n      color: white;\r\n      border-radius: 50%;\r\n      width: 18px;\r\n      height: 18px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-size: 12px;\r\n      font-weight: bold;\r\n      border: 2px solid white;\r\n    }\r\n\r\n    .table-container {\r\n      position: relative;\r\n      width: 100%;\r\n      max-width: 600px;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .players-around-table {\r\n      position: relative;\r\n      width: 100%;\r\n      height: 400px;\r\n    }\r\n\r\n    .player-position {\r\n      position: absolute;\r\n    }\r\n\r\n    .player-top {\r\n      top: 10px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n    }\r\n\r\n    .player-top-right {\r\n      top: 30px;\r\n      right: 30px;\r\n    }\r\n\r\n    .player-right {\r\n      top: 50%;\r\n      right: 10px;\r\n      transform: translateY(-50%);\r\n    }\r\n\r\n    .player-bottom-right {\r\n      bottom: 30px;\r\n      right: 30px;\r\n    }\r\n\r\n    .player-bottom {\r\n      bottom: 10px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n    }\r\n\r\n    .player-bottom-left {\r\n      bottom: 30px;\r\n      left: 30px;\r\n    }\r\n\r\n    .player-left {\r\n      top: 50%;\r\n      left: 10px;\r\n      transform: translateY(-50%);\r\n    }\r\n\r\n    .player-top-left {\r\n      top: 30px;\r\n      left: 30px;\r\n    }\r\n\r\n    .game-table {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      width: 300px;\r\n      height: 200px;\r\n      background: linear-gradient(135deg, #0f5132, #198754);\r\n      border-radius: 100px;\r\n      border: 4px solid #ffd700;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.3), 0 4px 16px rgba(0, 0, 0, 0.3);\r\n    }\r\n  `]\r\n})\r\nexport class GameRoomComponent implements OnInit, OnDestroy {\r\n  roomCode = '';\r\n  roomName = 'Cosmic Game Room';\r\n  gamePhase: 'waiting' | 'playing' | 'finished' = 'waiting';\r\n  isReconnecting = false;\r\n  \r\n  // Real game data\r\n  currentRoom: GameRoom | null = null;\r\n  players: Player[] = [];\r\n  \r\n  // Game state\r\n  myCards: Card[] = [];\r\n  opponentCards: number = 0;\r\n  discardPile: Card[] = [];\r\n  deckCount: number = 0;\r\n  \r\n  // Subscriptions\r\n  private subscriptions: Subscription[] = [];\r\n  \r\n  playerSlots: any[] = [];\r\n  currentPlayerId = '';\r\n  currentPlayerName = '';\r\n  hostId = '';\r\n  isHost = false;\r\n  isPlayerReady = false;\r\n  canStartGame = false;\r\n  myPlayerId = ''; // Track which player this client represents  \r\n  myPlayerName = ''; // Track this client's player name\r\n\r\n  // Player color themes for visual differentiation - now synchronized with board icons\r\n  private playerColors = [\r\n    { frame: 'border-red-500 bg-red-500/10', name: 'text-red-400', bgColor: 'hsl(0, 65%, 50%)' },      // Red\r\n    { frame: 'border-orange-500 bg-orange-500/10', name: 'text-orange-400', bgColor: 'hsl(30, 65%, 50%)' }, // Orange  \r\n    { frame: 'border-yellow-500 bg-yellow-500/10', name: 'text-yellow-400', bgColor: 'hsl(60, 65%, 50%)' }, // Yellow\r\n    { frame: 'border-green-500 bg-green-500/10', name: 'text-green-400', bgColor: 'hsl(120, 65%, 50%)' },   // Green\r\n    { frame: 'border-cyan-500 bg-cyan-500/10', name: 'text-cyan-400', bgColor: 'hsl(180, 65%, 50%)' },     // Cyan\r\n    { frame: 'border-blue-500 bg-blue-500/10', name: 'text-blue-400', bgColor: 'hsl(240, 65%, 50%)' },     // Blue\r\n    { frame: 'border-purple-500 bg-purple-500/10', name: 'text-purple-400', bgColor: 'hsl(270, 65%, 50%)' }, // Purple\r\n    { frame: 'border-pink-500 bg-pink-500/10', name: 'text-pink-400', bgColor: 'hsl(300, 65%, 50%)' }       // Magenta\r\n  ];\r\n\r\n  // Room settings\r\n  maxPlayers = 6;\r\n  gameVariant = 'classic';\r\n  turnTimeLimit = 30;\r\n  pointLimit = 100;\r\n\r\n  // Chat\r\n  chatMessages: { playerName: string; text: string; timestamp: Date }[] = [];\r\n  chatInput = '';\r\n\r\n  // Leave room confirmation\r\n  showLeaveConfirmation = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private gameApiService: GameApiService,\r\n    private socketService: SocketService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.roomCode = this.route.snapshot.params['code'];\r\n    console.log('Joining room:', this.roomCode);\r\n    \r\n    // Check if this is a reconnection\r\n    const storedRoomCode = localStorage.getItem('activeRoomCode');\r\n    this.isReconnecting = storedRoomCode === this.roomCode;\r\n    \r\n    if (this.isReconnecting) {\r\n      console.log('🔄 Reconnecting to existing session...');\r\n    }\r\n    \r\n    // Get player name from localStorage (should be set when joining/creating room)\r\n    this.myPlayerName = localStorage.getItem('currentPlayerName') || 'Player';\r\n    \r\n    // Connect to WebSocket\r\n    this.socketService.connect();\r\n    \r\n    // Subscribe to real-time updates\r\n    this.setupSocketSubscriptions();\r\n    \r\n    // Join the room via socket (important for session tracking)\r\n    this.socketService.joinRoom(this.roomCode, this.myPlayerName);\r\n    \r\n    // Load room data\r\n    this.loadRoomData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Cleanup subscriptions\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n    \r\n    // Leave room and disconnect socket\r\n    if (this.roomCode) {\r\n      this.socketService.leaveRoom(this.roomCode);\r\n    }\r\n    this.socketService.disconnect();\r\n    \r\n    // Don't clear session here as user might want to rejoin\r\n    // Session will be cleared when they start a new game or manually clear it\r\n  }\r\n\r\n  private setupSocketSubscriptions(): void {\r\n    // Room updates\r\n    this.subscriptions.push(\r\n      this.socketService.roomUpdated$.subscribe(room => {\r\n        if (room) {\r\n          this.updateRoomData(room);\r\n          this.updateSessionActivity(); // Keep session fresh\r\n        }\r\n      })\r\n    );\r\n\r\n    // Game updates\r\n    this.subscriptions.push(\r\n      this.socketService.gameUpdated$.subscribe(gameState => {\r\n        if (gameState && this.currentRoom) {\r\n          this.currentRoom.gameState = gameState;\r\n          this.gamePhase = gameState.phase;\r\n        }\r\n      })\r\n    );\r\n\r\n    // Player joined\r\n    this.subscriptions.push(\r\n      this.socketService.playerJoined$.subscribe(player => {\r\n        if (player && this.currentRoom) {\r\n          // Player already added via room update, just show notification\r\n          this.addChatMessage('System', `${player.name} joined the room`);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Player left\r\n    this.subscriptions.push(\r\n      this.socketService.playerLeft$.subscribe(playerId => {\r\n        if (playerId && this.currentRoom) {\r\n          const player = this.currentRoom.players.find(p => p.id === playerId);\r\n          if (player) {\r\n            this.addChatMessage('System', `${player.name} left the room`);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    // Chat messages\r\n    this.subscriptions.push(\r\n      this.socketService.chatReceived$.subscribe(chat => {\r\n        if (chat) {\r\n          this.addChatMessage(chat.playerName, chat.message);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Errors\r\n    this.subscriptions.push(\r\n      this.socketService.error$.subscribe(error => {\r\n        if (error) {\r\n          console.error('Socket error:', error);\r\n          this.addChatMessage('System', `Error: ${error}`);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Game started\r\n    this.subscriptions.push(\r\n      this.socketService.gameStarted$.subscribe(started => {\r\n        if (started) {\r\n          this.gamePhase = 'playing';\r\n          this.addChatMessage('System', 'Game started!');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private loadRoomData(): void {\r\n    this.gameApiService.getRoom(this.roomCode).subscribe({\r\n      next: (response) => {\r\n        if (response.success && response.data) {\r\n          this.updateRoomData(response.data);\r\n        } else {\r\n          console.error('Failed to load room:', response.error);\r\n          this.router.navigate(['/']);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading room:', error);\r\n        this.router.navigate(['/']);\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateRoomData(room: GameRoom): void {\r\n    this.currentRoom = room;\r\n    this.roomName = room.name;\r\n    this.players = room.players;\r\n    this.hostId = room.hostId;\r\n    this.gamePhase = room.gameState.phase;\r\n    this.maxPlayers = room.settings.maxPlayers;\r\n    this.gameVariant = room.settings.gameVariant as string;\r\n    this.turnTimeLimit = room.settings.turnTimeLimit;\r\n    this.pointLimit = room.settings.pointLimit;\r\n    \r\n    // Find current player by name\r\n    const myPlayer = this.players.find(p => p.name === this.myPlayerName);\r\n    if (myPlayer) {\r\n      this.myPlayerId = myPlayer.id;\r\n      this.isPlayerReady = myPlayer.isReady;\r\n    }\r\n    \r\n    // Update player slots\r\n    this.playerSlots = Array(this.maxPlayers).fill(null).map((_, i) => ({\r\n      index: i,\r\n      player: i < this.players.length ? this.players[i] : null\r\n    }));\r\n\r\n    // Determine if current user is host\r\n    this.isHost = this.hostId === this.myPlayerId;\r\n    \r\n    // Check if can start game\r\n    this.canStartGame = this.isHost && \r\n                       this.players.length >= 2 && \r\n                       this.players.every(p => p.isReady) &&\r\n                       this.gamePhase === 'waiting';\r\n\r\n    // Update current player info for game state\r\n    if (room.gameState.currentPlayer) {\r\n      this.currentPlayerId = room.gameState.currentPlayer;\r\n      const currentPlayer = this.players.find(p => p.id === room.gameState.currentPlayer);\r\n      this.currentPlayerName = currentPlayer?.name || '';\r\n    }\r\n    \r\n    // Update game data for display\r\n    if (this.gamePhase === 'playing') {\r\n      // Get my cards\r\n      const myPlayer = this.players.find(p => p.id === this.myPlayerId);\r\n      this.myCards = myPlayer?.cards || [];\r\n      \r\n      // Count opponent cards (for display purposes)\r\n      const opponents = this.players.filter(p => p.id !== this.myPlayerId);\r\n      this.opponentCards = opponents.length > 0 ? opponents[0].cards.length : 0;\r\n      \r\n      // Game state data\r\n      this.discardPile = room.gameState.discardPile || [];\r\n      this.deckCount = room.gameState.deck?.length || 0;\r\n    }\r\n    \r\n    console.log('Room updated. My player:', { id: this.myPlayerId, name: this.myPlayerName, ready: this.isPlayerReady });\r\n  }\r\n\r\n  private addChatMessage(playerName: string, text: string): void {\r\n    this.chatMessages.push({\r\n      playerName,\r\n      text,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get color theme for a player based on their index\r\n   */\r\n  getPlayerColorTheme(playerIndex: number) {\r\n    return this.playerColors[playerIndex % this.playerColors.length];\r\n  }\r\n\r\n  /**\r\n   * Get frame class for a player slot\r\n   */\r\n  getPlayerFrameClass(slot: any): string {\r\n    if (!slot.player) return '';\r\n    const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\r\n    const theme = this.getPlayerColorTheme(playerIndex);\r\n    return theme.frame;\r\n  }\r\n\r\n  /**\r\n   * Get name class for a player slot\r\n   */\r\n  getPlayerNameClass(slot: any): string {\r\n    if (!slot.player) return 'text-casino-gold';\r\n    const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\r\n    const theme = this.getPlayerColorTheme(playerIndex);\r\n    return theme.name;\r\n  }\r\n\r\n  toggleReady() {\r\n    // Don't optimistically update - wait for server confirmation\r\n    this.socketService.togglePlayerReady(this.roomCode);\r\n    console.log('Requesting ready status toggle...');\r\n  }\r\n\r\n  startGame() {\r\n    if (!this.canStartGame) return;\r\n    \r\n    this.socketService.startGame(this.roomCode);\r\n    console.log('Starting game...');\r\n  }\r\n\r\n  sendChatMessage() {\r\n    if (!this.chatInput.trim()) return;\r\n\r\n    this.socketService.sendChatMessage(this.roomCode, this.chatInput.trim());\r\n    this.chatInput = '';\r\n  }\r\n\r\n  leaveRoom() {\r\n    console.log('🚪 Showing leave room confirmation...');\r\n    this.showLeaveConfirmation = true;\r\n  }\r\n\r\n  cancelLeaveRoom() {\r\n    console.log('🚫 Leave room cancelled by user');\r\n    this.showLeaveConfirmation = false;\r\n  }\r\n\r\n  confirmLeaveRoom() {\r\n    console.log('🚪 Leaving room:', this.roomCode);\r\n    this.showLeaveConfirmation = false;\r\n    \r\n    // Clear session data when leaving\r\n    localStorage.removeItem('activeRoomCode');\r\n    localStorage.removeItem('sessionTimestamp');\r\n    localStorage.removeItem('sessionIsAIOnly');\r\n    localStorage.removeItem('currentPlayerName');\r\n    console.log('🧹 Session data cleared');\r\n    \r\n    try {\r\n      // Leave room via socket\r\n      this.socketService.leaveRoom(this.roomCode);\r\n      console.log('📡 Socket leave room called');\r\n      \r\n      // Navigate back to home\r\n      this.router.navigate(['/']);\r\n      console.log('🏠 Navigation to home initiated');\r\n    } catch (error) {\r\n      console.error('❌ Error leaving room:', error);\r\n      // Still try to navigate home even if socket fails\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get display string for a card\r\n   */\r\n  getCardDisplay(card: Card): string {\r\n    if (!card) return '';\r\n    \r\n    // Card suit symbols\r\n    const suitSymbols: { [key: string]: string } = {\r\n      'hearts': '♥',\r\n      'diamonds': '♦',\r\n      'clubs': '♣',\r\n      'spades': '♠'\r\n    };\r\n    \r\n    const suit = suitSymbols[card.suit] || card.suit;\r\n    \r\n    return `${card.rank}${suit}`;\r\n  }\r\n\r\n  getCardRank(card: Card): string {\r\n    return card?.rank || '';\r\n  }\r\n\r\n  getCardSuit(card: Card): string {\r\n    const suitSymbols: { [key: string]: string } = {\r\n      'hearts': '♥',\r\n      'diamonds': '♦',\r\n      'clubs': '♣',\r\n      'spades': '♠'\r\n    };\r\n    \r\n    return suitSymbols[card?.suit] || card?.suit || '';\r\n  }\r\n\r\n  getCardColor(card: Card): string {\r\n    if (!card) return 'black';\r\n    return (card.suit === 'hearts' || card.suit === 'diamonds') ? 'red' : 'black';\r\n  }\r\n\r\n  private updateSessionActivity(): void {\r\n    // Update session timestamp to keep it fresh\r\n    const currentRoomCode = localStorage.getItem('activeRoomCode');\r\n    if (currentRoomCode === this.roomCode) {\r\n      localStorage.setItem('sessionTimestamp', Date.now().toString());\r\n      \r\n      // Store room composition info for smarter timeout calculation\r\n      if (this.currentRoom) {\r\n        const humanPlayers = this.currentRoom.players.filter(p => !p.isAI);\r\n        const isAIOnly = humanPlayers.length <= 1; // Only this player or less\r\n        localStorage.setItem('sessionIsAIOnly', isAIOnly.toString());\r\n      }\r\n    }\r\n  }\r\n\r\n  generatePlayerInitials(name: string, allPlayers: any[]): string {\r\n    // Get all other player names for collision detection\r\n    const otherNames = allPlayers.filter(p => p.name !== name).map(p => p.name);\r\n    \r\n    // Start with first character\r\n    let initials = name.charAt(0).toUpperCase();\r\n    \r\n    // Check if any other player starts with the same character\r\n    const sameFirstChar = otherNames.some(otherName => \r\n      otherName.charAt(0).toUpperCase() === initials\r\n    );\r\n    \r\n    // If collision, add second character\r\n    if (sameFirstChar && name.length > 1) {\r\n      initials += name.charAt(1).toUpperCase();\r\n    }\r\n    \r\n    return initials;\r\n  }\r\n\r\n  getPlayerPositionClass(index: number, totalPlayers: number): string {\r\n    const positions = [\r\n      'player-bottom',     // Current player always at bottom\r\n      'player-top',        // Second player at top\r\n      'player-right',      // Third player at right\r\n      'player-left',       // Fourth player at left\r\n      'player-top-right',  // Fifth player at top-right\r\n      'player-top-left',   // Sixth player at top-left\r\n      'player-bottom-right', // Seventh player at bottom-right\r\n      'player-bottom-left'   // Eighth player at bottom-left\r\n    ];\r\n    \r\n    return positions[index] || 'player-top';\r\n  }\r\n\r\n  getPlayerBackgroundColor(playerName: string, playerIndex?: number): string {\r\n    if (playerIndex !== undefined) {\r\n      // Use consistent colors based on player index for synchronization\r\n      const hues = [0, 30, 60, 120, 180, 240, 270, 300]; // Red, Orange, Yellow, Green, Cyan, Blue, Purple, Magenta\r\n      const hue = hues[playerIndex % hues.length];\r\n      return `hsl(${hue}, 65%, 50%)`;\r\n    }\r\n    \r\n    // Fallback to name-based hash (for backward compatibility)\r\n    let hash = 0;\r\n    for (let i = 0; i < playerName.length; i++) {\r\n      hash = playerName.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    \r\n    // Create HSL color with good saturation and lightness for visibility\r\n    const hue = Math.abs(hash) % 360;\r\n    return `hsl(${hue}, 65%, 50%)`;\r\n  }\r\n\r\n  getCurrentPlayerTurnStatus(playerId: string): string {\r\n    // Check if it's this player's turn based on the current game state\r\n    if (this.currentRoom && this.currentRoom.gameState.currentPlayer === playerId) {\r\n      return 'active-turn';\r\n    }\r\n    return '';\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}