{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class SocketService {\n  constructor() {\n    this.socket = null;\n    this.connected = false;\n    // Observable streams for real-time updates\n    this.roomUpdatedSubject = new BehaviorSubject(null);\n    this.gameUpdatedSubject = new BehaviorSubject(null);\n    this.playerJoinedSubject = new BehaviorSubject(null);\n    this.playerLeftSubject = new BehaviorSubject(null);\n    this.chatReceivedSubject = new BehaviorSubject(null);\n    this.errorSubject = new BehaviorSubject(null);\n    this.gameStartedSubject = new BehaviorSubject(false);\n    this.gameEndedSubject = new BehaviorSubject(null);\n    // Public observables\n    this.roomUpdated$ = this.roomUpdatedSubject.asObservable();\n    this.gameUpdated$ = this.gameUpdatedSubject.asObservable();\n    this.playerJoined$ = this.playerJoinedSubject.asObservable();\n    this.playerLeft$ = this.playerLeftSubject.asObservable();\n    this.chatReceived$ = this.chatReceivedSubject.asObservable();\n    this.error$ = this.errorSubject.asObservable();\n    this.gameStarted$ = this.gameStartedSubject.asObservable();\n    this.gameEnded$ = this.gameEndedSubject.asObservable();\n  }\n  /**\n   * Connect to the Socket.IO server\n   */\n  connect() {\n    if (this.connected) return;\n    this.socket = io(environment.apiUrl, {\n      transports: ['websocket', 'polling']\n    });\n    this.setupEventListeners();\n  }\n  /**\n   * Disconnect from the Socket.IO server\n   */\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.connected = false;\n    }\n  }\n  /**\n   * Join a room\n   */\n  joinRoom(roomCode, playerName) {\n    if (this.socket) {\n      this.socket.emit('join-room', roomCode, playerName);\n    }\n  }\n  /**\n   * Leave a room\n   */\n  leaveRoom(roomCode) {\n    if (this.socket) {\n      this.socket.emit('leave-room', roomCode);\n    }\n  }\n  /**\n   * Make a game action\n   */\n  makeGameAction(roomCode, action) {\n    if (this.socket) {\n      this.socket.emit('game-action', roomCode, action);\n    }\n  }\n  /**\n   * Send a chat message\n   */\n  sendChatMessage(roomCode, message) {\n    if (this.socket) {\n      this.socket.emit('chat-message', roomCode, message);\n    }\n  }\n  /**\n   * Toggle player ready status\n   */\n  togglePlayerReady(roomCode) {\n    if (this.socket) {\n      this.socket.emit('player-ready', roomCode);\n    }\n  }\n  /**\n   * Start the game\n   */\n  startGame(roomCode) {\n    if (this.socket) {\n      this.socket.emit('start-game', roomCode);\n    }\n  }\n  /**\n   * Check if connected\n   */\n  isConnected() {\n    return this.connected && this.socket?.connected === true;\n  }\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      this.connected = true;\n      console.log('Connected to game server');\n    });\n    this.socket.on('disconnect', () => {\n      this.connected = false;\n      console.log('Disconnected from game server');\n    });\n    this.socket.on('room-updated', room => {\n      this.roomUpdatedSubject.next(room);\n    });\n    this.socket.on('game-updated', gameState => {\n      this.gameUpdatedSubject.next(gameState);\n    });\n    this.socket.on('player-joined', player => {\n      this.playerJoinedSubject.next(player);\n    });\n    this.socket.on('player-left', playerId => {\n      this.playerLeftSubject.next(playerId);\n    });\n    this.socket.on('chat-received', (playerId, playerName, message, timestamp) => {\n      this.chatReceivedSubject.next({\n        playerId,\n        playerName,\n        message,\n        timestamp\n      });\n    });\n    this.socket.on('error', message => {\n      this.errorSubject.next(message);\n      console.error('Socket error:', message);\n    });\n    this.socket.on('game-started', () => {\n      this.gameStartedSubject.next(true);\n    });\n    this.socket.on('game-ended', (winnerId, finalScores) => {\n      this.gameEndedSubject.next({\n        winnerId,\n        finalScores\n      });\n    });\n  }\n  static {\n    this.ɵfac = function SocketService_Factory(t) {\n      return new (t || SocketService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SocketService,\n      factory: SocketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","io","environment","SocketService","constructor","socket","connected","roomUpdatedSubject","gameUpdatedSubject","playerJoinedSubject","playerLeftSubject","chatReceivedSubject","errorSubject","gameStartedSubject","gameEndedSubject","roomUpdated$","asObservable","gameUpdated$","playerJoined$","playerLeft$","chatReceived$","error$","gameStarted$","gameEnded$","connect","apiUrl","transports","setupEventListeners","disconnect","joinRoom","roomCode","playerName","emit","leaveRoom","makeGameAction","action","sendChatMessage","message","togglePlayerReady","startGame","isConnected","on","console","log","room","next","gameState","player","playerId","timestamp","error","winnerId","finalScores","factory","ɵfac","providedIn"],"sources":["C:\\_dev\\cosmic-games\\frontend\\src\\app\\services\\socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { \r\n  ClientToServerEvents, \r\n  ServerToClientEvents, \r\n  GameRoom, \r\n  GameState, \r\n  Player \r\n} from '@cosmic-games/shared';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SocketService {\r\n  private socket: Socket<ServerToClientEvents, ClientToServerEvents> | null = null;\r\n  private connected = false;\r\n\r\n  // Observable streams for real-time updates\r\n  private roomUpdatedSubject = new BehaviorSubject<GameRoom | null>(null);\r\n  private gameUpdatedSubject = new BehaviorSubject<GameState | null>(null);\r\n  private playerJoinedSubject = new BehaviorSubject<Player | null>(null);\r\n  private playerLeftSubject = new BehaviorSubject<string | null>(null);\r\n  private chatReceivedSubject = new BehaviorSubject<{\r\n    playerId: string;\r\n    playerName: string;\r\n    message: string;\r\n    timestamp: Date;\r\n  } | null>(null);\r\n  private errorSubject = new BehaviorSubject<string | null>(null);\r\n  private gameStartedSubject = new BehaviorSubject<boolean>(false);\r\n  private gameEndedSubject = new BehaviorSubject<{\r\n    winnerId: string;\r\n    finalScores: Record<string, number>;\r\n  } | null>(null);\r\n\r\n  // Public observables\r\n  public roomUpdated$ = this.roomUpdatedSubject.asObservable();\r\n  public gameUpdated$ = this.gameUpdatedSubject.asObservable();\r\n  public playerJoined$ = this.playerJoinedSubject.asObservable();\r\n  public playerLeft$ = this.playerLeftSubject.asObservable();\r\n  public chatReceived$ = this.chatReceivedSubject.asObservable();\r\n  public error$ = this.errorSubject.asObservable();\r\n  public gameStarted$ = this.gameStartedSubject.asObservable();\r\n  public gameEnded$ = this.gameEndedSubject.asObservable();\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Connect to the Socket.IO server\r\n   */\r\n  connect(): void {\r\n    if (this.connected) return;\r\n\r\n    this.socket = io(environment.apiUrl, {\r\n      transports: ['websocket', 'polling']\r\n    });\r\n\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Disconnect from the Socket.IO server\r\n   */\r\n  disconnect(): void {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.connected = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Join a room\r\n   */\r\n  joinRoom(roomCode: string, playerName: string): void {\r\n    if (this.socket) {\r\n      this.socket.emit('join-room', roomCode, playerName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Leave a room\r\n   */\r\n  leaveRoom(roomCode: string): void {\r\n    if (this.socket) {\r\n      this.socket.emit('leave-room', roomCode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a game action\r\n   */\r\n  makeGameAction(roomCode: string, action: any): void {\r\n    if (this.socket) {\r\n      this.socket.emit('game-action', roomCode, action);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a chat message\r\n   */\r\n  sendChatMessage(roomCode: string, message: string): void {\r\n    if (this.socket) {\r\n      this.socket.emit('chat-message', roomCode, message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle player ready status\r\n   */\r\n  togglePlayerReady(roomCode: string): void {\r\n    if (this.socket) {\r\n      this.socket.emit('player-ready', roomCode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start the game\r\n   */\r\n  startGame(roomCode: string): void {\r\n    if (this.socket) {\r\n      this.socket.emit('start-game', roomCode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if connected\r\n   */\r\n  isConnected(): boolean {\r\n    return this.connected && this.socket?.connected === true;\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on('connect', () => {\r\n      this.connected = true;\r\n      console.log('Connected to game server');\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      this.connected = false;\r\n      console.log('Disconnected from game server');\r\n    });\r\n\r\n    this.socket.on('room-updated', (room: GameRoom) => {\r\n      this.roomUpdatedSubject.next(room);\r\n    });\r\n\r\n    this.socket.on('game-updated', (gameState: GameState) => {\r\n      this.gameUpdatedSubject.next(gameState);\r\n    });\r\n\r\n    this.socket.on('player-joined', (player: Player) => {\r\n      this.playerJoinedSubject.next(player);\r\n    });\r\n\r\n    this.socket.on('player-left', (playerId: string) => {\r\n      this.playerLeftSubject.next(playerId);\r\n    });\r\n\r\n    this.socket.on('chat-received', (playerId: string, playerName: string, message: string, timestamp: Date) => {\r\n      this.chatReceivedSubject.next({\r\n        playerId,\r\n        playerName,\r\n        message,\r\n        timestamp\r\n      });\r\n    });\r\n\r\n    this.socket.on('error', (message: string) => {\r\n      this.errorSubject.next(message);\r\n      console.error('Socket error:', message);\r\n    });\r\n\r\n    this.socket.on('game-started', () => {\r\n      this.gameStartedSubject.next(true);\r\n    });\r\n\r\n    this.socket.on('game-ended', (winnerId: string, finalScores: Record<string, number>) => {\r\n      this.gameEndedSubject.next({\r\n        winnerId,\r\n        finalScores\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}