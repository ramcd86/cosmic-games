{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/game-api.service\";\nimport * as i3 from \"../../services/socket.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction GameRoomComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1, \" Waiting for all players to be ready... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.currentPlayerName, \"'s turn \");\n  }\n}\nfunction GameRoomComponent_div_20_div_2_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r2 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \\uD83E\\uDD16 AI Player (\", slot_r2.player.difficulty, \") \");\n  }\n}\nfunction GameRoomComponent_div_20_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 40);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 41);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, GameRoomComponent_div_20_div_2_div_1_div_5_Template, 2, 1, \"div\", 42);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerNameClass(slot_r2));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", slot_r2.player.name, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(slot_r2.player.isReady ? \"text-green-400\" : \"text-yellow-400\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", slot_r2.player.isReady ? \"\\u2713 Ready\" : \"\\u23F3 Not Ready\", \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", slot_r2.player.isAI);\n  }\n}\nfunction GameRoomComponent_div_20_div_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 44)(1, \"div\", 45);\n    i0.ɵɵtext(2, \"\\uD83D\\uDC64\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 41);\n    i0.ɵɵtext(4, \"Empty Slot\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction GameRoomComponent_div_20_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38);\n    i0.ɵɵtemplate(1, GameRoomComponent_div_20_div_2_div_1_Template, 6, 6, \"div\", 39)(2, GameRoomComponent_div_20_div_2_ng_template_2_Template, 5, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r2 = ctx.$implicit;\n    const emptySlot_r3 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerFrameClass(slot_r2));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", slot_r2.player)(\"ngIfElse\", emptySlot_r3);\n  }\n}\nfunction GameRoomComponent_div_20_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 46);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.toggleReady());\n    });\n    i0.ɵɵtext(1, \" Ready Up \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.toggleReady());\n    });\n    i0.ɵɵtext(1, \" Not Ready \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function GameRoomComponent_div_20_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.startGame());\n    });\n    i0.ɵɵtext(1, \" Start Game \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32);\n    i0.ɵɵtemplate(2, GameRoomComponent_div_20_div_2_Template, 4, 3, \"div\", 33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 34);\n    i0.ɵɵtemplate(4, GameRoomComponent_div_20_button_4_Template, 2, 0, \"button\", 35)(5, GameRoomComponent_div_20_button_5_Template, 2, 0, \"button\", 36)(6, GameRoomComponent_div_20_button_6_Template, 2, 0, \"button\", 37);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.playerSlots);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isPlayerReady);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isPlayerReady);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isHost && ctx_r0.canStartGame);\n  }\n}\nfunction GameRoomComponent_div_21_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"div\", 67);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const player_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerPositionClass(i_r8, ctx_r0.players.length));\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.getPlayerBackgroundColor(player_r7.name, i_r8));\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getCurrentPlayerTurnStatus(player_r7.id));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.generatePlayerInitials(player_r7.name, ctx_r0.players), \" \");\n  }\n}\nfunction GameRoomComponent_div_21_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 68);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 69);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardRank(ctx_r0.discardPile[ctx_r0.discardPile.length - 1]), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardSuit(ctx_r0.discardPile[ctx_r0.discardPile.length - 1]), \" \");\n  }\n}\nfunction GameRoomComponent_div_21_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 70);\n    i0.ɵɵtext(1, \"Empty\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_21_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 71)(1, \"div\", 68);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 69);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const card_r9 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getCardColor(card_r9) === \"red\" ? \"card-red\" : \"card-black\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardRank(card_r9), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getCardSuit(card_r9), \" \");\n  }\n}\nfunction GameRoomComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 49)(2, \"div\", 50);\n    i0.ɵɵtemplate(3, GameRoomComponent_div_21_div_3_Template, 3, 5, \"div\", 51);\n    i0.ɵɵelementStart(4, \"div\", 52)(5, \"div\", 53)(6, \"div\", 31)(7, \"div\", 54)(8, \"span\", 55);\n    i0.ɵɵtext(9, \"\\uD83C\\uDCA0\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"p\", 56);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 31)(13, \"div\", 57);\n    i0.ɵɵtemplate(14, GameRoomComponent_div_21_div_14_Template, 5, 2, \"div\", 58)(15, GameRoomComponent_div_21_span_15_Template, 2, 0, \"span\", 59);\n    i0.ɵɵelementEnd()()()()()();\n    i0.ɵɵelementStart(16, \"div\", 60);\n    i0.ɵɵtemplate(17, GameRoomComponent_div_21_div_17_Template, 5, 3, \"div\", 61);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 62)(19, \"button\", 63);\n    i0.ɵɵtext(20, \"Draw\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 64);\n    i0.ɵɵtext(22, \"Knock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 65);\n    i0.ɵɵtext(24, \"Gin\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.players);\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate(ctx_r0.deckCount);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.discardPile.length > 0 ? ctx_r0.getCardColor(ctx_r0.discardPile[ctx_r0.discardPile.length - 1]) === \"red\" ? \"card-red\" : \"card-black\" : \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.discardPile.length > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.discardPile.length === 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.myCards);\n  }\n}\nfunction GameRoomComponent_div_27_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 82);\n    i0.ɵɵtext(1, \"\\uD83D\\uDC51\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 83);\n    i0.ɵɵtext(1, \"\\uD83E\\uDD16\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 84);\n    i0.ɵɵtext(1, \"\\u2713\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const player_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" | \", player_r10.difficulty, \"\");\n  }\n}\nfunction GameRoomComponent_div_27_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 85);\n    i0.ɵɵtext(1, \"\\u25CF\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 86);\n    i0.ɵɵtext(1, \"\\u25CF\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameRoomComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72)(1, \"div\", 73)(2, \"div\", 74);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\")(5, \"div\", 75)(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, GameRoomComponent_div_27_span_8_Template, 2, 0, \"span\", 76)(9, GameRoomComponent_div_27_span_9_Template, 2, 0, \"span\", 77)(10, GameRoomComponent_div_27_span_10_Template, 2, 0, \"span\", 78);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 79);\n    i0.ɵɵtext(12);\n    i0.ɵɵtemplate(13, GameRoomComponent_div_27_span_13_Template, 2, 1, \"span\", 58);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(14, \"div\", 41);\n    i0.ɵɵtemplate(15, GameRoomComponent_div_27_span_15_Template, 2, 0, \"span\", 80)(16, GameRoomComponent_div_27_span_16_Template, 2, 0, \"span\", 81);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const player_r10 = ctx.$implicit;\n    const i_r11 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.getCurrentPlayerTurnStatus(player_r10.id) === \"active-turn\" ? \"bg-casino-gold/20 border-casino-gold\" : \"border-transparent\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerColorTheme(i_r11).frame);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.getPlayerBackgroundColor(player_r10.name, i_r11));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.generatePlayerInitials(player_r10.name, ctx_r0.players), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getPlayerColorTheme(i_r11).name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(player_r10.name);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", player_r10.id === ctx_r0.hostId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", player_r10.isAI);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.getCurrentPlayerTurnStatus(player_r10.id) === \"active-turn\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Score: \", player_r10.score, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", player_r10.isAI);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", player_r10.isConnected);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !player_r10.isConnected);\n  }\n}\nfunction GameRoomComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41)(1, \"span\", 87);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 88);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r12 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", message_r12.playerName, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r12.text);\n  }\n}\nexport class GameRoomComponent {\n  constructor(route, router, gameApiService, socketService) {\n    this.route = route;\n    this.router = router;\n    this.gameApiService = gameApiService;\n    this.socketService = socketService;\n    this.roomCode = '';\n    this.roomName = 'Cosmic Game Room';\n    this.gamePhase = 'waiting';\n    this.isReconnecting = false;\n    // Real game data\n    this.currentRoom = null;\n    this.players = [];\n    // Game state\n    this.myCards = [];\n    this.opponentCards = 0;\n    this.discardPile = [];\n    this.deckCount = 0;\n    // Subscriptions\n    this.subscriptions = [];\n    this.playerSlots = [];\n    this.currentPlayerId = '';\n    this.currentPlayerName = '';\n    this.hostId = '';\n    this.isHost = false;\n    this.isPlayerReady = false;\n    this.canStartGame = false;\n    this.myPlayerId = ''; // Track which player this client represents  \n    this.myPlayerName = ''; // Track this client's player name\n    // Player color themes for visual differentiation - now synchronized with board icons\n    this.playerColors = [{\n      frame: 'border-red-500 bg-red-500/10',\n      name: 'text-red-400',\n      bgColor: 'hsl(0, 65%, 50%)'\n    },\n    // Red\n    {\n      frame: 'border-orange-500 bg-orange-500/10',\n      name: 'text-orange-400',\n      bgColor: 'hsl(30, 65%, 50%)'\n    },\n    // Orange  \n    {\n      frame: 'border-yellow-500 bg-yellow-500/10',\n      name: 'text-yellow-400',\n      bgColor: 'hsl(60, 65%, 50%)'\n    },\n    // Yellow\n    {\n      frame: 'border-green-500 bg-green-500/10',\n      name: 'text-green-400',\n      bgColor: 'hsl(120, 65%, 50%)'\n    },\n    // Green\n    {\n      frame: 'border-cyan-500 bg-cyan-500/10',\n      name: 'text-cyan-400',\n      bgColor: 'hsl(180, 65%, 50%)'\n    },\n    // Cyan\n    {\n      frame: 'border-blue-500 bg-blue-500/10',\n      name: 'text-blue-400',\n      bgColor: 'hsl(240, 65%, 50%)'\n    },\n    // Blue\n    {\n      frame: 'border-purple-500 bg-purple-500/10',\n      name: 'text-purple-400',\n      bgColor: 'hsl(270, 65%, 50%)'\n    },\n    // Purple\n    {\n      frame: 'border-pink-500 bg-pink-500/10',\n      name: 'text-pink-400',\n      bgColor: 'hsl(300, 65%, 50%)'\n    } // Magenta\n    ];\n    // Room settings\n    this.maxPlayers = 6;\n    this.gameVariant = 'classic';\n    this.turnTimeLimit = 30;\n    this.pointLimit = 100;\n    // Chat\n    this.chatMessages = [];\n    this.chatInput = '';\n  }\n  ngOnInit() {\n    this.roomCode = this.route.snapshot.params['code'];\n    console.log('Joining room:', this.roomCode);\n    // Check if this is a reconnection\n    const storedRoomCode = localStorage.getItem('activeRoomCode');\n    this.isReconnecting = storedRoomCode === this.roomCode;\n    if (this.isReconnecting) {\n      console.log('🔄 Reconnecting to existing session...');\n    }\n    // Get player name from localStorage (should be set when joining/creating room)\n    this.myPlayerName = localStorage.getItem('currentPlayerName') || 'Player';\n    // Connect to WebSocket\n    this.socketService.connect();\n    // Subscribe to real-time updates\n    this.setupSocketSubscriptions();\n    // Join the room via socket (important for session tracking)\n    this.socketService.joinRoom(this.roomCode, this.myPlayerName);\n    // Load room data\n    this.loadRoomData();\n  }\n  ngOnDestroy() {\n    // Cleanup subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    // Leave room and disconnect socket\n    if (this.roomCode) {\n      this.socketService.leaveRoom(this.roomCode);\n    }\n    this.socketService.disconnect();\n    // Don't clear session here as user might want to rejoin\n    // Session will be cleared when they start a new game or manually clear it\n  }\n  setupSocketSubscriptions() {\n    // Room updates\n    this.subscriptions.push(this.socketService.roomUpdated$.subscribe(room => {\n      if (room) {\n        this.updateRoomData(room);\n        this.updateSessionActivity(); // Keep session fresh\n      }\n    }));\n    // Game updates\n    this.subscriptions.push(this.socketService.gameUpdated$.subscribe(gameState => {\n      if (gameState && this.currentRoom) {\n        this.currentRoom.gameState = gameState;\n        this.gamePhase = gameState.phase;\n      }\n    }));\n    // Player joined\n    this.subscriptions.push(this.socketService.playerJoined$.subscribe(player => {\n      if (player && this.currentRoom) {\n        // Player already added via room update, just show notification\n        this.addChatMessage('System', `${player.name} joined the room`);\n      }\n    }));\n    // Player left\n    this.subscriptions.push(this.socketService.playerLeft$.subscribe(playerId => {\n      if (playerId && this.currentRoom) {\n        const player = this.currentRoom.players.find(p => p.id === playerId);\n        if (player) {\n          this.addChatMessage('System', `${player.name} left the room`);\n        }\n      }\n    }));\n    // Chat messages\n    this.subscriptions.push(this.socketService.chatReceived$.subscribe(chat => {\n      if (chat) {\n        this.addChatMessage(chat.playerName, chat.message);\n      }\n    }));\n    // Errors\n    this.subscriptions.push(this.socketService.error$.subscribe(error => {\n      if (error) {\n        console.error('Socket error:', error);\n        this.addChatMessage('System', `Error: ${error}`);\n      }\n    }));\n    // Game started\n    this.subscriptions.push(this.socketService.gameStarted$.subscribe(started => {\n      if (started) {\n        this.gamePhase = 'playing';\n        this.addChatMessage('System', 'Game started!');\n      }\n    }));\n  }\n  loadRoomData() {\n    this.gameApiService.getRoom(this.roomCode).subscribe({\n      next: response => {\n        if (response.success && response.data) {\n          this.updateRoomData(response.data);\n        } else {\n          console.error('Failed to load room:', response.error);\n          this.router.navigate(['/']);\n        }\n      },\n      error: error => {\n        console.error('Error loading room:', error);\n        this.router.navigate(['/']);\n      }\n    });\n  }\n  updateRoomData(room) {\n    this.currentRoom = room;\n    this.roomName = room.name;\n    this.players = room.players;\n    this.hostId = room.hostId;\n    this.gamePhase = room.gameState.phase;\n    this.maxPlayers = room.settings.maxPlayers;\n    this.gameVariant = room.settings.gameVariant;\n    this.turnTimeLimit = room.settings.turnTimeLimit;\n    this.pointLimit = room.settings.pointLimit;\n    // Find current player by name\n    const myPlayer = this.players.find(p => p.name === this.myPlayerName);\n    if (myPlayer) {\n      this.myPlayerId = myPlayer.id;\n      this.isPlayerReady = myPlayer.isReady;\n    }\n    // Update player slots\n    this.playerSlots = Array(this.maxPlayers).fill(null).map((_, i) => ({\n      index: i,\n      player: i < this.players.length ? this.players[i] : null\n    }));\n    // Determine if current user is host\n    this.isHost = this.hostId === this.myPlayerId;\n    // Check if can start game\n    this.canStartGame = this.isHost && this.players.length >= 2 && this.players.every(p => p.isReady) && this.gamePhase === 'waiting';\n    // Update current player info for game state\n    if (room.gameState.currentPlayer) {\n      const currentPlayer = this.players.find(p => p.id === room.gameState.currentPlayer);\n      this.currentPlayerName = currentPlayer?.name || '';\n    }\n    // Update game data for display\n    if (this.gamePhase === 'playing') {\n      // Get my cards\n      const myPlayer = this.players.find(p => p.id === this.myPlayerId);\n      this.myCards = myPlayer?.cards || [];\n      // Count opponent cards (for display purposes)\n      const opponents = this.players.filter(p => p.id !== this.myPlayerId);\n      this.opponentCards = opponents.length > 0 ? opponents[0].cards.length : 0;\n      // Game state data\n      this.discardPile = room.gameState.discardPile || [];\n      this.deckCount = room.gameState.deck?.length || 0;\n    }\n    console.log('Room updated. My player:', {\n      id: this.myPlayerId,\n      name: this.myPlayerName,\n      ready: this.isPlayerReady\n    });\n  }\n  addChatMessage(playerName, text) {\n    this.chatMessages.push({\n      playerName,\n      text,\n      timestamp: new Date()\n    });\n  }\n  /**\n   * Get color theme for a player based on their index\n   */\n  getPlayerColorTheme(playerIndex) {\n    return this.playerColors[playerIndex % this.playerColors.length];\n  }\n  /**\n   * Get frame class for a player slot\n   */\n  getPlayerFrameClass(slot) {\n    if (!slot.player) return '';\n    const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\n    const theme = this.getPlayerColorTheme(playerIndex);\n    return theme.frame;\n  }\n  /**\n   * Get name class for a player slot\n   */\n  getPlayerNameClass(slot) {\n    if (!slot.player) return 'text-casino-gold';\n    const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\n    const theme = this.getPlayerColorTheme(playerIndex);\n    return theme.name;\n  }\n  toggleReady() {\n    // Don't optimistically update - wait for server confirmation\n    this.socketService.togglePlayerReady(this.roomCode);\n    console.log('Requesting ready status toggle...');\n  }\n  startGame() {\n    if (!this.canStartGame) return;\n    this.socketService.startGame(this.roomCode);\n    console.log('Starting game...');\n  }\n  sendChatMessage() {\n    if (!this.chatInput.trim()) return;\n    this.socketService.sendChatMessage(this.roomCode, this.chatInput.trim());\n    this.chatInput = '';\n  }\n  leaveRoom() {\n    if (confirm('Are you sure you want to leave the room?')) {\n      console.log('🚪 Leaving room:', this.roomCode);\n      // Clear session data when leaving\n      localStorage.removeItem('activeRoomCode');\n      localStorage.removeItem('sessionTimestamp');\n      localStorage.removeItem('sessionIsAIOnly');\n      localStorage.removeItem('currentPlayerName');\n      console.log('🧹 Session data cleared');\n      try {\n        // Leave room via socket\n        this.socketService.leaveRoom(this.roomCode);\n        console.log('📡 Socket leave room called');\n        // Navigate back to home\n        this.router.navigate(['/']);\n        console.log('🏠 Navigation to home initiated');\n      } catch (error) {\n        console.error('❌ Error leaving room:', error);\n        // Still try to navigate home even if socket fails\n        this.router.navigate(['/']);\n      }\n    } else {\n      console.log('🚫 Leave room cancelled by user');\n    }\n  }\n  /**\n   * Get display string for a card\n   */\n  getCardDisplay(card) {\n    if (!card) return '';\n    // Card suit symbols\n    const suitSymbols = {\n      'hearts': '♥',\n      'diamonds': '♦',\n      'clubs': '♣',\n      'spades': '♠'\n    };\n    const suit = suitSymbols[card.suit] || card.suit;\n    return `${card.rank}${suit}`;\n  }\n  getCardRank(card) {\n    return card?.rank || '';\n  }\n  getCardSuit(card) {\n    const suitSymbols = {\n      'hearts': '♥',\n      'diamonds': '♦',\n      'clubs': '♣',\n      'spades': '♠'\n    };\n    return suitSymbols[card?.suit] || card?.suit || '';\n  }\n  getCardColor(card) {\n    if (!card) return 'black';\n    return card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black';\n  }\n  updateSessionActivity() {\n    // Update session timestamp to keep it fresh\n    const currentRoomCode = localStorage.getItem('activeRoomCode');\n    if (currentRoomCode === this.roomCode) {\n      localStorage.setItem('sessionTimestamp', Date.now().toString());\n      // Store room composition info for smarter timeout calculation\n      if (this.currentRoom) {\n        const humanPlayers = this.currentRoom.players.filter(p => !p.isAI);\n        const isAIOnly = humanPlayers.length <= 1; // Only this player or less\n        localStorage.setItem('sessionIsAIOnly', isAIOnly.toString());\n      }\n    }\n  }\n  generatePlayerInitials(name, allPlayers) {\n    // Get all other player names for collision detection\n    const otherNames = allPlayers.filter(p => p.name !== name).map(p => p.name);\n    // Start with first character\n    let initials = name.charAt(0).toUpperCase();\n    // Check if any other player starts with the same character\n    const sameFirstChar = otherNames.some(otherName => otherName.charAt(0).toUpperCase() === initials);\n    // If collision, add second character\n    if (sameFirstChar && name.length > 1) {\n      initials += name.charAt(1).toUpperCase();\n    }\n    return initials;\n  }\n  getPlayerPositionClass(index, totalPlayers) {\n    const positions = ['player-bottom',\n    // Current player always at bottom\n    'player-top',\n    // Second player at top\n    'player-right',\n    // Third player at right\n    'player-left',\n    // Fourth player at left\n    'player-top-right',\n    // Fifth player at top-right\n    'player-top-left',\n    // Sixth player at top-left\n    'player-bottom-right',\n    // Seventh player at bottom-right\n    'player-bottom-left' // Eighth player at bottom-left\n    ];\n    return positions[index] || 'player-top';\n  }\n  getPlayerBackgroundColor(playerName, playerIndex) {\n    if (playerIndex !== undefined) {\n      // Use consistent colors based on player index for synchronization\n      const hues = [0, 30, 60, 120, 180, 240, 270, 300]; // Red, Orange, Yellow, Green, Cyan, Blue, Purple, Magenta\n      const hue = hues[playerIndex % hues.length];\n      return `hsl(${hue}, 65%, 50%)`;\n    }\n    // Fallback to name-based hash (for backward compatibility)\n    let hash = 0;\n    for (let i = 0; i < playerName.length; i++) {\n      hash = playerName.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    // Create HSL color with good saturation and lightness for visibility\n    const hue = Math.abs(hash) % 360;\n    return `hsl(${hue}, 65%, 50%)`;\n  }\n  getCurrentPlayerTurnStatus(playerId) {\n    // Check if it's this player's turn based on the current game state\n    if (this.currentRoom && this.currentRoom.gameState.currentPlayer === playerId) {\n      return 'active-turn';\n    }\n    return '';\n  }\n  static {\n    this.ɵfac = function GameRoomComponent_Factory(t) {\n      return new (t || GameRoomComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.GameApiService), i0.ɵɵdirectiveInject(i3.SocketService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GameRoomComponent,\n      selectors: [[\"app-game-room\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 61,\n      vars: 15,\n      consts: [[\"emptySlot\", \"\"], [1, \"max-w-6xl\", \"mx-auto\"], [1, \"casino-panel\", \"mb-6\"], [1, \"flex\", \"justify-between\", \"items-center\"], [1, \"text-2xl\", \"font-bold\", \"text-gold\"], [1, \"text-casino-silver\"], [1, \"font-mono\", \"text-casino-gold\"], [1, \"bg-red-600\", \"hover:bg-red-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\", \"transition-colors\", 3, \"click\"], [1, \"grid\", \"lg:grid-cols-4\", \"gap-6\"], [1, \"lg:col-span-3\"], [1, \"casino-table\", \"p-8\", \"mb-6\"], [1, \"text-center\", \"mb-8\"], [1, \"text-3xl\", \"font-bold\", \"text-casino-silver\", \"mb-2\"], [\"class\", \"text-casino-silver/80\", 4, \"ngIf\"], [\"class\", \"text-casino-gold\", 4, \"ngIf\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"class\", \"space-y-6\", 4, \"ngIf\"], [1, \"space-y-6\"], [1, \"casino-panel\"], [1, \"text-lg\", \"font-bold\", \"text-casino-gold\", \"mb-4\"], [1, \"space-y-2\"], [\"class\", \"flex justify-between items-center p-3 rounded-lg transition-all duration-300 border-2\", 3, \"class\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"space-y-2\", \"max-h-40\", \"overflow-y-auto\", \"mb-4\"], [\"class\", \"text-sm\", 4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"gap-2\", 3, \"ngSubmit\"], [\"name\", \"chatInput\", \"type\", \"text\", \"placeholder\", \"Type a message...\", \"maxlength\", \"100\", 1, \"casino-input\", \"flex-1\", \"text-sm\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\", 1, \"bg-casino-gold\", \"text-casino-black\", \"px-3\", \"py-1\", \"rounded\", \"text-sm\", \"hover:bg-casino-bronze\", \"transition-colors\", 3, \"disabled\"], [1, \"space-y-2\", \"text-sm\"], [1, \"flex\", \"justify-between\"], [1, \"text-casino-gold\"], [1, \"text-casino-silver/80\"], [1, \"text-center\"], [1, \"grid\", \"grid-cols-2\", \"md:grid-cols-3\", \"gap-4\", \"max-w-md\", \"mx-auto\"], [\"class\", \"casino-panel p-4 text-center min-h-[100px] flex flex-col justify-center transition-all duration-300\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-8\", \"space-y-4\"], [\"class\", \"casino-button mr-4\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg mr-4\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"casino-button\", 3, \"click\", 4, \"ngIf\"], [1, \"casino-panel\", \"p-4\", \"text-center\", \"min-h-[100px]\", \"flex\", \"flex-col\", \"justify-center\", \"transition-all\", \"duration-300\", 3, \"ngClass\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"text-lg\", \"font-bold\", \"transition-colors\", \"duration-300\", 3, \"ngClass\"], [1, \"text-sm\"], [\"class\", \"text-xs text-casino-silver/60\", 4, \"ngIf\"], [1, \"text-xs\", \"text-casino-silver/60\"], [1, \"text-casino-silver/50\"], [1, \"text-2xl\", \"mb-2\"], [1, \"casino-button\", \"mr-4\", 3, \"click\"], [1, \"bg-yellow-600\", \"hover:bg-yellow-700\", \"text-white\", \"px-6\", \"py-3\", \"rounded-lg\", \"mr-4\", 3, \"click\"], [1, \"casino-button\", 3, \"click\"], [1, \"table-container\"], [1, \"players-around-table\"], [\"class\", \"player-position\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"game-table\"], [1, \"flex\", \"justify-center\", \"space-x-8\"], [1, \"w-16\", \"h-24\", \"bg-casino-charcoal\", \"rounded\", \"border-2\", \"border-casino-gold\", \"cursor-pointer\", \"hover:scale-105\", \"transition-transform\", \"flex\", \"items-center\", \"justify-center\"], [1, \"text-casino-gold\", \"text-sm\"], [1, \"text-white\", \"text-xs\", \"mt-1\"], [1, \"discard-card\", \"card-style\", \"cursor-pointer\", \"hover:scale-105\", \"transition-transform\", 3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"absolute inset-0 flex items-center justify-center text-gray-400 text-xs\", 4, \"ngIf\"], [1, \"flex\", \"justify-center\", \"space-x-1\"], [\"class\", \"hand-card card-style cursor-pointer hover:scale-105 hover:-translate-y-2 transition-all\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-center\", \"space-x-4\"], [1, \"casino-button\"], [1, \"bg-yellow-600\", \"hover:bg-yellow-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\"], [1, \"bg-green-600\", \"hover:bg-green-700\", \"text-white\", \"px-4\", \"py-2\", \"rounded-lg\"], [1, \"player-position\", 3, \"ngClass\"], [1, \"player-circle\", 3, \"ngClass\"], [1, \"card-rank\"], [1, \"card-suit\"], [1, \"absolute\", \"inset-0\", \"flex\", \"items-center\", \"justify-center\", \"text-gray-400\", \"text-xs\"], [1, \"hand-card\", \"card-style\", \"cursor-pointer\", \"hover:scale-105\", \"hover:-translate-y-2\", \"transition-all\", 3, \"ngClass\"], [1, \"flex\", \"justify-between\", \"items-center\", \"p-3\", \"rounded-lg\", \"transition-all\", \"duration-300\", \"border-2\", 3, \"ngClass\"], [1, \"flex\", \"items-center\", \"space-x-3\"], [1, \"w-8\", \"h-8\", \"rounded-full\", \"flex\", \"items-center\", \"justify-center\", \"text-white\", \"text-xs\", \"font-bold\"], [1, \"font-medium\", \"transition-colors\", \"duration-300\", \"flex\", \"items-center\", \"space-x-2\", 3, \"ngClass\"], [\"class\", \"text-casino-gold text-xs\", 4, \"ngIf\"], [\"class\", \"text-xs\", 4, \"ngIf\"], [\"class\", \"text-green-400 text-sm\", 4, \"ngIf\"], [1, \"text-sm\", \"text-casino-silver/60\"], [\"class\", \"text-green-400\", 4, \"ngIf\"], [\"class\", \"text-red-400\", 4, \"ngIf\"], [1, \"text-casino-gold\", \"text-xs\"], [1, \"text-xs\"], [1, \"text-green-400\", \"text-sm\"], [1, \"text-green-400\"], [1, \"text-red-400\"], [1, \"text-casino-gold\", \"font-medium\"], [1, \"text-casino-silver\", \"ml-1\"]],\n      template: function GameRoomComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\")(4, \"h1\", 4);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"p\", 5);\n          i0.ɵɵtext(7, \"Room Code: \");\n          i0.ɵɵelementStart(8, \"span\", 6);\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(10, \"button\", 7);\n          i0.ɵɵlistener(\"click\", function GameRoomComponent_Template_button_click_10_listener() {\n            return ctx.leaveRoom();\n          });\n          i0.ɵɵtext(11, \" Leave Room \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\", 9)(14, \"div\", 10)(15, \"div\", 11)(16, \"h2\", 12);\n          i0.ɵɵtext(17);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, GameRoomComponent_div_18_Template, 2, 0, \"div\", 13)(19, GameRoomComponent_div_19_Template, 2, 1, \"div\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(20, GameRoomComponent_div_20_Template, 7, 4, \"div\", 15)(21, GameRoomComponent_div_21_Template, 25, 6, \"div\", 16);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"div\", 17)(23, \"div\", 18)(24, \"h3\", 19);\n          i0.ɵɵtext(25, \"Players\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"div\", 20);\n          i0.ɵɵtemplate(27, GameRoomComponent_div_27_Template, 17, 15, \"div\", 21);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"div\", 18)(29, \"h3\", 19);\n          i0.ɵɵtext(30, \"Chat\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"div\", 22);\n          i0.ɵɵtemplate(32, GameRoomComponent_div_32_Template, 5, 2, \"div\", 23);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"form\", 24);\n          i0.ɵɵlistener(\"ngSubmit\", function GameRoomComponent_Template_form_ngSubmit_33_listener() {\n            return ctx.sendChatMessage();\n          });\n          i0.ɵɵelementStart(34, \"input\", 25);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function GameRoomComponent_Template_input_ngModelChange_34_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.chatInput, $event) || (ctx.chatInput = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"button\", 26);\n          i0.ɵɵtext(36, \" Send \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(37, \"div\", 18)(38, \"h3\", 19);\n          i0.ɵɵtext(39, \"Settings\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(40, \"div\", 27)(41, \"div\", 28)(42, \"span\", 5);\n          i0.ɵɵtext(43, \"Max Players:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(44, \"span\", 29);\n          i0.ɵɵtext(45);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(46, \"div\", 28)(47, \"span\", 5);\n          i0.ɵɵtext(48, \"Game Variant:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(49, \"span\", 29);\n          i0.ɵɵtext(50);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(51, \"div\", 28)(52, \"span\", 5);\n          i0.ɵɵtext(53, \"Turn Limit:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(54, \"span\", 29);\n          i0.ɵɵtext(55);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(56, \"div\", 28)(57, \"span\", 5);\n          i0.ɵɵtext(58, \"Point Limit:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(59, \"span\", 29);\n          i0.ɵɵtext(60);\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.roomName);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.roomCode);\n          i0.ɵɵadvance(8);\n          i0.ɵɵtextInterpolate1(\" \", ctx.gamePhase === \"waiting\" ? \"Waiting for Players\" : ctx.gamePhase === \"playing\" ? \"Game in Progress\" : \"Game Finished\", \" \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"waiting\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"playing\" && ctx.currentPlayerName);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"waiting\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.gamePhase === \"playing\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.players);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.chatMessages);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.chatInput);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", !ctx.chatInput.trim());\n          i0.ɵɵadvance(10);\n          i0.ɵɵtextInterpolate(ctx.maxPlayers);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.gameVariant);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"\", ctx.turnTimeLimit, \"s\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.pointLimit);\n        }\n      },\n      dependencies: [CommonModule, i4.NgClass, i4.NgForOf, i4.NgIf, FormsModule, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.MaxLengthValidator, i5.NgModel, i5.NgForm],\n      styles: [\"@charset \\\"UTF-8\\\";\\n.card-style[_ngcontent-%COMP%] {\\n  background: white;\\n  border-radius: 8px;\\n  position: relative;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n  overflow: hidden;\\n}\\n\\n.card-rank[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 6px;\\n  left: 6px;\\n  font-weight: bold;\\n  font-size: 0.875rem;\\n  line-height: 1;\\n}\\n\\n.card-suit[_ngcontent-%COMP%] {\\n  position: absolute;\\n  bottom: 6px;\\n  right: 6px;\\n  font-weight: bold;\\n  font-size: 1.125rem;\\n  line-height: 1;\\n}\\n\\n.card-red[_ngcontent-%COMP%] {\\n  color: #dc2626;\\n  border: 2px solid #dc2626;\\n  box-shadow: inset 0 0 0 1px #dc2626;\\n}\\n\\n.card-black[_ngcontent-%COMP%] {\\n  color: #1f2937;\\n  border: 2px solid #1f2937;\\n  box-shadow: inset 0 0 0 1px #1f2937;\\n}\\n\\n.hand-card[_ngcontent-%COMP%] {\\n  width: 3rem;\\n  height: 4rem;\\n}\\n\\n.discard-card[_ngcontent-%COMP%] {\\n  width: 4rem;\\n  height: 6rem;\\n}\\n\\n.discard-card[_ngcontent-%COMP%]   .card-rank[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n  top: 8px;\\n  left: 8px;\\n}\\n\\n.discard-card[_ngcontent-%COMP%]   .card-suit[_ngcontent-%COMP%] {\\n  font-size: 1.25rem;\\n  bottom: 8px;\\n  right: 8px;\\n}\\n\\n.player-circle[_ngcontent-%COMP%] {\\n  width: 60px;\\n  height: 60px;\\n  border-radius: 50%;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-weight: bold;\\n  font-size: 0.875rem;\\n  color: white;\\n  position: relative;\\n  border: 3px solid rgba(255, 255, 255, 0.3);\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\\n}\\n\\n.player-circle.active-turn[_ngcontent-%COMP%]::after {\\n  content: \\\"\\u2713\\\";\\n  position: absolute;\\n  bottom: -8px;\\n  left: 50%;\\n  transform: translateX(-50%);\\n  background: #10b981;\\n  color: white;\\n  border-radius: 50%;\\n  width: 18px;\\n  height: 18px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: 12px;\\n  font-weight: bold;\\n  border: 2px solid white;\\n}\\n\\n.table-container[_ngcontent-%COMP%] {\\n  position: relative;\\n  width: 100%;\\n  max-width: 600px;\\n  margin: 0 auto;\\n}\\n\\n.players-around-table[_ngcontent-%COMP%] {\\n  position: relative;\\n  width: 100%;\\n  height: 400px;\\n}\\n\\n.player-position[_ngcontent-%COMP%] {\\n  position: absolute;\\n}\\n\\n.player-top[_ngcontent-%COMP%] {\\n  top: 10px;\\n  left: 50%;\\n  transform: translateX(-50%);\\n}\\n\\n.player-top-right[_ngcontent-%COMP%] {\\n  top: 30px;\\n  right: 30px;\\n}\\n\\n.player-right[_ngcontent-%COMP%] {\\n  top: 50%;\\n  right: 10px;\\n  transform: translateY(-50%);\\n}\\n\\n.player-bottom-right[_ngcontent-%COMP%] {\\n  bottom: 30px;\\n  right: 30px;\\n}\\n\\n.player-bottom[_ngcontent-%COMP%] {\\n  bottom: 10px;\\n  left: 50%;\\n  transform: translateX(-50%);\\n}\\n\\n.player-bottom-left[_ngcontent-%COMP%] {\\n  bottom: 30px;\\n  left: 30px;\\n}\\n\\n.player-left[_ngcontent-%COMP%] {\\n  top: 50%;\\n  left: 10px;\\n  transform: translateY(-50%);\\n}\\n\\n.player-top-left[_ngcontent-%COMP%] {\\n  top: 30px;\\n  left: 30px;\\n}\\n\\n.game-table[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  width: 300px;\\n  height: 200px;\\n  background: linear-gradient(135deg, #0f5132, #198754);\\n  border-radius: 100px;\\n  border: 4px solid #ffd700;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.3), 0 4px 16px rgba(0, 0, 0, 0.3);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhbWUtcm9vbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FBQ1o7RUFDRSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSx3Q0FBQTtFQUNBLGdCQUFBO0FBQ047O0FBRUk7RUFDRSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLGNBQUE7QUFDTjs7QUFFSTtFQUNFLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFVBQUE7RUFDQSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0EsY0FBQTtBQUNOOztBQUVJO0VBQ0UsY0FBQTtFQUNBLHlCQUFBO0VBQ0EsbUNBQUE7QUFDTjs7QUFFSTtFQUNFLGNBQUE7RUFDQSx5QkFBQTtFQUNBLG1DQUFBO0FBQ047O0FBRUk7RUFDRSxXQUFBO0VBQ0EsWUFBQTtBQUNOOztBQUVJO0VBQ0UsV0FBQTtFQUNBLFlBQUE7QUFDTjs7QUFFSTtFQUNFLGVBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtBQUNOOztBQUVJO0VBQ0Usa0JBQUE7RUFDQSxXQUFBO0VBQ0EsVUFBQTtBQUNOOztBQUVJO0VBQ0UsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLDBDQUFBO0VBQ0Esd0NBQUE7QUFDTjs7QUFFSTtFQUNFLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxTQUFBO0VBQ0EsMkJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7RUFDQSx1QkFBQTtBQUNOOztBQUVJO0VBQ0Usa0JBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0FBQ047O0FBRUk7RUFDRSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxhQUFBO0FBQ047O0FBRUk7RUFDRSxrQkFBQTtBQUNOOztBQUVJO0VBQ0UsU0FBQTtFQUNBLFNBQUE7RUFDQSwyQkFBQTtBQUNOOztBQUVJO0VBQ0UsU0FBQTtFQUNBLFdBQUE7QUFDTjs7QUFFSTtFQUNFLFFBQUE7RUFDQSxXQUFBO0VBQ0EsMkJBQUE7QUFDTjs7QUFFSTtFQUNFLFlBQUE7RUFDQSxXQUFBO0FBQ047O0FBRUk7RUFDRSxZQUFBO0VBQ0EsU0FBQTtFQUNBLDJCQUFBO0FBQ047O0FBRUk7RUFDRSxZQUFBO0VBQ0EsVUFBQTtBQUNOOztBQUVJO0VBQ0UsUUFBQTtFQUNBLFVBQUE7RUFDQSwyQkFBQTtBQUNOOztBQUVJO0VBQ0UsU0FBQTtFQUNBLFVBQUE7QUFDTjs7QUFFSTtFQUNFLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxnQ0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EscURBQUE7RUFDQSxvQkFBQTtFQUNBLHlCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSw0RUFBQTtBQUNOIiwiZmlsZSI6ImdhbWUtcm9vbS5jb21wb25lbnQudHMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAuY2FyZC1zdHlsZSB7XG4gICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cbiAgICBcbiAgICAuY2FyZC1yYW5rIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogNnB4O1xuICAgICAgbGVmdDogNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBmb250LXNpemU6IDAuODc1cmVtO1xuICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgfVxuICAgIFxuICAgIC5jYXJkLXN1aXQge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiA2cHg7XG4gICAgICByaWdodDogNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBmb250LXNpemU6IDEuMTI1cmVtO1xuICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgfVxuICAgIFxuICAgIC5jYXJkLXJlZCB7XG4gICAgICBjb2xvcjogI2RjMjYyNjtcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkICNkYzI2MjY7XG4gICAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxcHggI2RjMjYyNjtcbiAgICB9XG4gICAgXG4gICAgLmNhcmQtYmxhY2sge1xuICAgICAgY29sb3I6ICMxZjI5Mzc7XG4gICAgICBib3JkZXI6IDJweCBzb2xpZCAjMWYyOTM3O1xuICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICMxZjI5Mzc7XG4gICAgfVxuICAgIFxuICAgIC5oYW5kLWNhcmQge1xuICAgICAgd2lkdGg6IDNyZW07XG4gICAgICBoZWlnaHQ6IDRyZW07XG4gICAgfVxuICAgIFxuICAgIC5kaXNjYXJkLWNhcmQge1xuICAgICAgd2lkdGg6IDRyZW07XG4gICAgICBoZWlnaHQ6IDZyZW07XG4gICAgfVxuICAgIFxuICAgIC5kaXNjYXJkLWNhcmQgLmNhcmQtcmFuayB7XG4gICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICB0b3A6IDhweDtcbiAgICAgIGxlZnQ6IDhweDtcbiAgICB9XG4gICAgXG4gICAgLmRpc2NhcmQtY2FyZCAuY2FyZC1zdWl0IHtcbiAgICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgICAgIGJvdHRvbTogOHB4O1xuICAgICAgcmlnaHQ6IDhweDtcbiAgICB9XG5cbiAgICAucGxheWVyLWNpcmNsZSB7XG4gICAgICB3aWR0aDogNjBweDtcbiAgICAgIGhlaWdodDogNjBweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBib3JkZXI6IDNweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7XG4gICAgICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgIH1cblxuICAgIC5wbGF5ZXItY2lyY2xlLmFjdGl2ZS10dXJuOjphZnRlciB7XG4gICAgICBjb250ZW50OiAn4pyTJztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGJvdHRvbTogLThweDtcbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICAgIGJhY2tncm91bmQ6ICMxMGI5ODE7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICB3aWR0aDogMThweDtcbiAgICAgIGhlaWdodDogMThweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHdoaXRlO1xuICAgIH1cblxuICAgIC50YWJsZS1jb250YWluZXIge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXgtd2lkdGg6IDYwMHB4O1xuICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgfVxuXG4gICAgLnBsYXllcnMtYXJvdW5kLXRhYmxlIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiA0MDBweDtcbiAgICB9XG5cbiAgICAucGxheWVyLXBvc2l0aW9uIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB9XG5cbiAgICAucGxheWVyLXRvcCB7XG4gICAgICB0b3A6IDEwcHg7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgfVxuXG4gICAgLnBsYXllci10b3AtcmlnaHQge1xuICAgICAgdG9wOiAzMHB4O1xuICAgICAgcmlnaHQ6IDMwcHg7XG4gICAgfVxuXG4gICAgLnBsYXllci1yaWdodCB7XG4gICAgICB0b3A6IDUwJTtcbiAgICAgIHJpZ2h0OiAxMHB4O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgIH1cblxuICAgIC5wbGF5ZXItYm90dG9tLXJpZ2h0IHtcbiAgICAgIGJvdHRvbTogMzBweDtcbiAgICAgIHJpZ2h0OiAzMHB4O1xuICAgIH1cblxuICAgIC5wbGF5ZXItYm90dG9tIHtcbiAgICAgIGJvdHRvbTogMTBweDtcbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICB9XG5cbiAgICAucGxheWVyLWJvdHRvbS1sZWZ0IHtcbiAgICAgIGJvdHRvbTogMzBweDtcbiAgICAgIGxlZnQ6IDMwcHg7XG4gICAgfVxuXG4gICAgLnBsYXllci1sZWZ0IHtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgbGVmdDogMTBweDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG5cbiAgICAucGxheWVyLXRvcC1sZWZ0IHtcbiAgICAgIHRvcDogMzBweDtcbiAgICAgIGxlZnQ6IDMwcHg7XG4gICAgfVxuXG4gICAgLmdhbWUtdGFibGUge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiA1MCU7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICAgIHdpZHRoOiAzMDBweDtcbiAgICAgIGhlaWdodDogMjAwcHg7XG4gICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjMGY1MTMyLCAjMTk4NzU0KTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwMHB4O1xuICAgICAgYm9yZGVyOiA0cHggc29saWQgI2ZmZDcwMDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMjBweCByZ2JhKDAsIDAsIDAsIDAuMyksIDAgNHB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjMpO1xuICAgIH1cbiAgIl19 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvZ2FtZS1yb29tL2dhbWUtcm9vbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FBQ1o7RUFDRSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSx3Q0FBQTtFQUNBLGdCQUFBO0FBQ047O0FBRUk7RUFDRSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLGNBQUE7QUFDTjs7QUFFSTtFQUNFLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFVBQUE7RUFDQSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0EsY0FBQTtBQUNOOztBQUVJO0VBQ0UsY0FBQTtFQUNBLHlCQUFBO0VBQ0EsbUNBQUE7QUFDTjs7QUFFSTtFQUNFLGNBQUE7RUFDQSx5QkFBQTtFQUNBLG1DQUFBO0FBQ047O0FBRUk7RUFDRSxXQUFBO0VBQ0EsWUFBQTtBQUNOOztBQUVJO0VBQ0UsV0FBQTtFQUNBLFlBQUE7QUFDTjs7QUFFSTtFQUNFLGVBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtBQUNOOztBQUVJO0VBQ0Usa0JBQUE7RUFDQSxXQUFBO0VBQ0EsVUFBQTtBQUNOOztBQUVJO0VBQ0UsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLDBDQUFBO0VBQ0Esd0NBQUE7QUFDTjs7QUFFSTtFQUNFLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxTQUFBO0VBQ0EsMkJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7RUFDQSx1QkFBQTtBQUNOOztBQUVJO0VBQ0Usa0JBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0FBQ047O0FBRUk7RUFDRSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxhQUFBO0FBQ047O0FBRUk7RUFDRSxrQkFBQTtBQUNOOztBQUVJO0VBQ0UsU0FBQTtFQUNBLFNBQUE7RUFDQSwyQkFBQTtBQUNOOztBQUVJO0VBQ0UsU0FBQTtFQUNBLFdBQUE7QUFDTjs7QUFFSTtFQUNFLFFBQUE7RUFDQSxXQUFBO0VBQ0EsMkJBQUE7QUFDTjs7QUFFSTtFQUNFLFlBQUE7RUFDQSxXQUFBO0FBQ047O0FBRUk7RUFDRSxZQUFBO0VBQ0EsU0FBQTtFQUNBLDJCQUFBO0FBQ047O0FBRUk7RUFDRSxZQUFBO0VBQ0EsVUFBQTtBQUNOOztBQUVJO0VBQ0UsUUFBQTtFQUNBLFVBQUE7RUFDQSwyQkFBQTtBQUNOOztBQUVJO0VBQ0UsU0FBQTtFQUNBLFVBQUE7QUFDTjs7QUFFSTtFQUNFLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxnQ0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EscURBQUE7RUFDQSxvQkFBQTtFQUNBLHlCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSw0RUFBQTtBQUNOO0FBQ0EsbzlNQUFvOU0iLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAuY2FyZC1zdHlsZSB7XG4gICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cbiAgICBcbiAgICAuY2FyZC1yYW5rIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogNnB4O1xuICAgICAgbGVmdDogNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBmb250LXNpemU6IDAuODc1cmVtO1xuICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgfVxuICAgIFxuICAgIC5jYXJkLXN1aXQge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiA2cHg7XG4gICAgICByaWdodDogNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBmb250LXNpemU6IDEuMTI1cmVtO1xuICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgfVxuICAgIFxuICAgIC5jYXJkLXJlZCB7XG4gICAgICBjb2xvcjogI2RjMjYyNjtcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkICNkYzI2MjY7XG4gICAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxcHggI2RjMjYyNjtcbiAgICB9XG4gICAgXG4gICAgLmNhcmQtYmxhY2sge1xuICAgICAgY29sb3I6ICMxZjI5Mzc7XG4gICAgICBib3JkZXI6IDJweCBzb2xpZCAjMWYyOTM3O1xuICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICMxZjI5Mzc7XG4gICAgfVxuICAgIFxuICAgIC5oYW5kLWNhcmQge1xuICAgICAgd2lkdGg6IDNyZW07XG4gICAgICBoZWlnaHQ6IDRyZW07XG4gICAgfVxuICAgIFxuICAgIC5kaXNjYXJkLWNhcmQge1xuICAgICAgd2lkdGg6IDRyZW07XG4gICAgICBoZWlnaHQ6IDZyZW07XG4gICAgfVxuICAgIFxuICAgIC5kaXNjYXJkLWNhcmQgLmNhcmQtcmFuayB7XG4gICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICB0b3A6IDhweDtcbiAgICAgIGxlZnQ6IDhweDtcbiAgICB9XG4gICAgXG4gICAgLmRpc2NhcmQtY2FyZCAuY2FyZC1zdWl0IHtcbiAgICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgICAgIGJvdHRvbTogOHB4O1xuICAgICAgcmlnaHQ6IDhweDtcbiAgICB9XG5cbiAgICAucGxheWVyLWNpcmNsZSB7XG4gICAgICB3aWR0aDogNjBweDtcbiAgICAgIGhlaWdodDogNjBweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBib3JkZXI6IDNweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7XG4gICAgICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgIH1cblxuICAgIC5wbGF5ZXItY2lyY2xlLmFjdGl2ZS10dXJuOjphZnRlciB7XG4gICAgICBjb250ZW50OiAnw6LCnMKTJztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGJvdHRvbTogLThweDtcbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICAgIGJhY2tncm91bmQ6ICMxMGI5ODE7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICB3aWR0aDogMThweDtcbiAgICAgIGhlaWdodDogMThweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHdoaXRlO1xuICAgIH1cblxuICAgIC50YWJsZS1jb250YWluZXIge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXgtd2lkdGg6IDYwMHB4O1xuICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgfVxuXG4gICAgLnBsYXllcnMtYXJvdW5kLXRhYmxlIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiA0MDBweDtcbiAgICB9XG5cbiAgICAucGxheWVyLXBvc2l0aW9uIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB9XG5cbiAgICAucGxheWVyLXRvcCB7XG4gICAgICB0b3A6IDEwcHg7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgfVxuXG4gICAgLnBsYXllci10b3AtcmlnaHQge1xuICAgICAgdG9wOiAzMHB4O1xuICAgICAgcmlnaHQ6IDMwcHg7XG4gICAgfVxuXG4gICAgLnBsYXllci1yaWdodCB7XG4gICAgICB0b3A6IDUwJTtcbiAgICAgIHJpZ2h0OiAxMHB4O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgIH1cblxuICAgIC5wbGF5ZXItYm90dG9tLXJpZ2h0IHtcbiAgICAgIGJvdHRvbTogMzBweDtcbiAgICAgIHJpZ2h0OiAzMHB4O1xuICAgIH1cblxuICAgIC5wbGF5ZXItYm90dG9tIHtcbiAgICAgIGJvdHRvbTogMTBweDtcbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICB9XG5cbiAgICAucGxheWVyLWJvdHRvbS1sZWZ0IHtcbiAgICAgIGJvdHRvbTogMzBweDtcbiAgICAgIGxlZnQ6IDMwcHg7XG4gICAgfVxuXG4gICAgLnBsYXllci1sZWZ0IHtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgbGVmdDogMTBweDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG5cbiAgICAucGxheWVyLXRvcC1sZWZ0IHtcbiAgICAgIHRvcDogMzBweDtcbiAgICAgIGxlZnQ6IDMwcHg7XG4gICAgfVxuXG4gICAgLmdhbWUtdGFibGUge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiA1MCU7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICAgIHdpZHRoOiAzMDBweDtcbiAgICAgIGhlaWdodDogMjAwcHg7XG4gICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjMGY1MTMyLCAjMTk4NzU0KTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwMHB4O1xuICAgICAgYm9yZGVyOiA0cHggc29saWQgI2ZmZDcwMDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMjBweCByZ2JhKDAsIDAsIDAsIDAuMyksIDAgNHB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjMpO1xuICAgIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","currentPlayerName","slot_r2","player","difficulty","ɵɵtemplate","GameRoomComponent_div_20_div_2_div_1_div_5_Template","ɵɵproperty","getPlayerNameClass","name","ɵɵclassMap","isReady","isAI","GameRoomComponent_div_20_div_2_div_1_Template","GameRoomComponent_div_20_div_2_ng_template_2_Template","ɵɵtemplateRefExtractor","getPlayerFrameClass","emptySlot_r3","ɵɵlistener","GameRoomComponent_div_20_button_4_Template_button_click_0_listener","ɵɵrestoreView","_r4","ɵɵnextContext","ɵɵresetView","toggleReady","GameRoomComponent_div_20_button_5_Template_button_click_0_listener","_r5","GameRoomComponent_div_20_button_6_Template_button_click_0_listener","_r6","startGame","GameRoomComponent_div_20_div_2_Template","GameRoomComponent_div_20_button_4_Template","GameRoomComponent_div_20_button_5_Template","GameRoomComponent_div_20_button_6_Template","playerSlots","isPlayerReady","isHost","canStartGame","getPlayerPositionClass","i_r8","players","length","ɵɵstyleProp","getPlayerBackgroundColor","player_r7","getCurrentPlayerTurnStatus","id","generatePlayerInitials","getCardRank","discardPile","getCardSuit","getCardColor","card_r9","GameRoomComponent_div_21_div_3_Template","GameRoomComponent_div_21_div_14_Template","GameRoomComponent_div_21_span_15_Template","GameRoomComponent_div_21_div_17_Template","ɵɵtextInterpolate","deckCount","myCards","player_r10","GameRoomComponent_div_27_span_8_Template","GameRoomComponent_div_27_span_9_Template","GameRoomComponent_div_27_span_10_Template","GameRoomComponent_div_27_span_13_Template","GameRoomComponent_div_27_span_15_Template","GameRoomComponent_div_27_span_16_Template","getPlayerColorTheme","i_r11","frame","hostId","score","isConnected","message_r12","playerName","text","GameRoomComponent","constructor","route","router","gameApiService","socketService","roomCode","roomName","gamePhase","isReconnecting","currentRoom","opponentCards","subscriptions","currentPlayerId","myPlayerId","myPlayerName","playerColors","bgColor","maxPlayers","gameVariant","turnTimeLimit","pointLimit","chatMessages","chatInput","ngOnInit","snapshot","params","console","log","storedRoomCode","localStorage","getItem","connect","setupSocketSubscriptions","joinRoom","loadRoomData","ngOnDestroy","forEach","sub","unsubscribe","leaveRoom","disconnect","push","roomUpdated$","subscribe","room","updateRoomData","updateSessionActivity","gameUpdated$","gameState","phase","playerJoined$","addChatMessage","playerLeft$","playerId","find","p","chatReceived$","chat","message","error$","error","gameStarted$","started","getRoom","next","response","success","data","navigate","settings","myPlayer","Array","fill","map","_","i","index","every","currentPlayer","cards","opponents","filter","deck","ready","timestamp","Date","playerIndex","slot","findIndex","theme","togglePlayerReady","sendChatMessage","trim","confirm","removeItem","getCardDisplay","card","suitSymbols","suit","rank","currentRoomCode","setItem","now","toString","humanPlayers","isAIOnly","allPlayers","otherNames","initials","charAt","toUpperCase","sameFirstChar","some","otherName","totalPlayers","positions","undefined","hues","hue","hash","charCodeAt","Math","abs","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","GameApiService","i3","SocketService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","GameRoomComponent_Template","rf","ctx","GameRoomComponent_Template_button_click_10_listener","GameRoomComponent_div_18_Template","GameRoomComponent_div_19_Template","GameRoomComponent_div_20_Template","GameRoomComponent_div_21_Template","GameRoomComponent_div_27_Template","GameRoomComponent_div_32_Template","GameRoomComponent_Template_form_ngSubmit_33_listener","ɵɵtwoWayListener","GameRoomComponent_Template_input_ngModelChange_34_listener","$event","ɵɵtwoWayBindingSet","ɵɵtwoWayProperty","i4","NgClass","NgForOf","NgIf","i5","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","MaxLengthValidator","NgModel","NgForm","styles"],"sources":["C:\\_dev\\cosmic-games\\frontend\\src\\app\\pages\\game-room\\game-room.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { GameApiService } from '../../services/game-api.service';\r\nimport { SocketService } from '../../services/socket.service';\r\nimport { GameRoom, Player, Card } from '@cosmic-games/shared';\r\n\r\n@Component({\r\n  selector: 'app-game-room',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Room Header -->\r\n      <div class=\"casino-panel mb-6\">\r\n        <div class=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 class=\"text-2xl font-bold text-gold\">{{ roomName }}</h1>\r\n            <p class=\"text-casino-silver\">Room Code: <span class=\"font-mono text-casino-gold\">{{ roomCode }}</span></p>\r\n          </div>\r\n          <button \r\n            (click)=\"leaveRoom()\"\r\n            class=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\">\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"grid lg:grid-cols-4 gap-6\">\r\n        <!-- Game Area -->\r\n        <div class=\"lg:col-span-3\">\r\n          <div class=\"casino-table p-8 mb-6\">\r\n            <div class=\"text-center mb-8\">\r\n              <h2 class=\"text-3xl font-bold text-casino-silver mb-2\">\r\n                {{ gamePhase === 'waiting' ? 'Waiting for Players' : \r\n                   gamePhase === 'playing' ? 'Game in Progress' : 'Game Finished' }}\r\n              </h2>\r\n              \r\n              <div *ngIf=\"gamePhase === 'waiting'\" class=\"text-casino-silver/80\">\r\n                Waiting for all players to be ready...\r\n              </div>\r\n              \r\n              <div *ngIf=\"gamePhase === 'playing' && currentPlayerName\" class=\"text-casino-gold\">\r\n                {{ currentPlayerName }}'s turn\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Waiting Screen -->\r\n            <div *ngIf=\"gamePhase === 'waiting'\" class=\"text-center\">\r\n              <div class=\"grid grid-cols-2 md:grid-cols-3 gap-4 max-w-md mx-auto\">\r\n                <div \r\n                  *ngFor=\"let slot of playerSlots\" \r\n                  class=\"casino-panel p-4 text-center min-h-[100px] flex flex-col justify-center transition-all duration-300\"\r\n                  [ngClass]=\"getPlayerFrameClass(slot)\">\r\n                  <div *ngIf=\"slot.player; else emptySlot\">\r\n                    <div class=\"text-lg font-bold transition-colors duration-300\" \r\n                         [ngClass]=\"getPlayerNameClass(slot)\">\r\n                      {{ slot.player.name }}\r\n                    </div>\r\n                    <div class=\"text-sm\" [class]=\"slot.player.isReady ? 'text-green-400' : 'text-yellow-400'\">\r\n                      {{ slot.player.isReady ? '✓ Ready' : '⏳ Not Ready' }}\r\n                    </div>\r\n                    <div *ngIf=\"slot.player.isAI\" class=\"text-xs text-casino-silver/60\">\r\n                      🤖 AI Player ({{ slot.player.difficulty }})\r\n                    </div>\r\n                  </div>\r\n                  <ng-template #emptySlot>\r\n                    <div class=\"text-casino-silver/50\">\r\n                      <div class=\"text-2xl mb-2\">👤</div>\r\n                      <div class=\"text-sm\">Empty Slot</div>\r\n                    </div>\r\n                  </ng-template>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mt-8 space-y-4\">\r\n                <button \r\n                  *ngIf=\"!isPlayerReady\"\r\n                  (click)=\"toggleReady()\"\r\n                  class=\"casino-button mr-4\">\r\n                  Ready Up\r\n                </button>\r\n                \r\n                <button \r\n                  *ngIf=\"isPlayerReady\"\r\n                  (click)=\"toggleReady()\"\r\n                  class=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg mr-4\">\r\n                  Not Ready\r\n                </button>\r\n\r\n                <button \r\n                  *ngIf=\"isHost && canStartGame\"\r\n                  (click)=\"startGame()\"\r\n                  class=\"casino-button\">\r\n                  Start Game\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Game Screen -->\r\n            <div *ngIf=\"gamePhase === 'playing'\" class=\"space-y-6\">\r\n              <!-- Table with Players Around It -->\r\n              <div class=\"table-container\">\r\n                <div class=\"players-around-table\">\r\n                  <!-- Players positioned around the table -->\r\n                  <div \r\n                    *ngFor=\"let player of players; let i = index\" \r\n                    class=\"player-position\"\r\n                    [ngClass]=\"getPlayerPositionClass(i, players.length)\">\r\n                    <div \r\n                      class=\"player-circle\"\r\n                      [style.background-color]=\"getPlayerBackgroundColor(player.name, i)\"\r\n                      [ngClass]=\"getCurrentPlayerTurnStatus(player.id)\">\r\n                      {{ generatePlayerInitials(player.name, players) }}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <!-- Game Table -->\r\n                  <div class=\"game-table\">\r\n                    <!-- Center Area with Deck and Discard -->\r\n                    <div class=\"flex justify-center space-x-8\">\r\n                      <!-- Deck -->\r\n                      <div class=\"text-center\">\r\n                        <div class=\"w-16 h-24 bg-casino-charcoal rounded border-2 border-casino-gold cursor-pointer hover:scale-105 transition-transform flex items-center justify-center\">\r\n                          <span class=\"text-casino-gold text-sm\">🂠</span>\r\n                        </div>\r\n                        <p class=\"text-white text-xs mt-1\">{{ deckCount }}</p>\r\n                      </div>\r\n\r\n                      <!-- Discard Pile -->\r\n                      <div class=\"text-center\">\r\n                        <div class=\"discard-card card-style cursor-pointer hover:scale-105 transition-transform\" [ngClass]=\"discardPile.length > 0 ? (getCardColor(discardPile[discardPile.length - 1]) === 'red' ? 'card-red' : 'card-black') : ''\">\r\n                          <div *ngIf=\"discardPile.length > 0\">\r\n                            <div class=\"card-rank\">\r\n                              {{ getCardRank(discardPile[discardPile.length - 1]) }}\r\n                            </div>\r\n                            <div class=\"card-suit\">\r\n                              {{ getCardSuit(discardPile[discardPile.length - 1]) }}\r\n                            </div>\r\n                          </div>\r\n                          <span *ngIf=\"discardPile.length === 0\" class=\"absolute inset-0 flex items-center justify-center text-gray-400 text-xs\">Empty</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Player Hand -->\r\n              <div class=\"flex justify-center space-x-1\">\r\n                <div \r\n                  *ngFor=\"let card of myCards; let i = index\" \r\n                  class=\"hand-card card-style cursor-pointer hover:scale-105 hover:-translate-y-2 transition-all\"\r\n                  [ngClass]=\"getCardColor(card) === 'red' ? 'card-red' : 'card-black'\">\r\n                  <div class=\"card-rank\">\r\n                    {{ getCardRank(card) }}\r\n                  </div>\r\n                  <div class=\"card-suit\">\r\n                    {{ getCardSuit(card) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Game Actions -->\r\n              <div class=\"text-center space-x-4\">\r\n                <button class=\"casino-button\">Draw</button>\r\n                <button class=\"bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg\">Knock</button>\r\n                <button class=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg\">Gin</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Sidebar -->\r\n        <div class=\"space-y-6\">\r\n          <!-- Players List -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Players</h3>\r\n            <div class=\"space-y-2\">\r\n              <div \r\n                *ngFor=\"let player of players; let i = index\" \r\n                class=\"flex justify-between items-center p-3 rounded-lg transition-all duration-300 border-2\"\r\n                [class]=\"getCurrentPlayerTurnStatus(player.id) === 'active-turn' ? 'bg-casino-gold/20 border-casino-gold' : 'border-transparent'\"\r\n                [ngClass]=\"getPlayerColorTheme(i).frame\">\r\n                <div class=\"flex items-center space-x-3\">\r\n                  <!-- Player Circle Icon (matching board) -->\r\n                  <div class=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold\"\r\n                       [style.background-color]=\"getPlayerBackgroundColor(player.name, i)\">\r\n                    {{ generatePlayerInitials(player.name, players) }}\r\n                  </div>\r\n                  <div>\r\n                    <div class=\"font-medium transition-colors duration-300 flex items-center space-x-2\" \r\n                         [ngClass]=\"getPlayerColorTheme(i).name\">\r\n                      <span>{{ player.name }}</span>\r\n                      <span *ngIf=\"player.id === hostId\" class=\"text-casino-gold text-xs\">👑</span>\r\n                      <span *ngIf=\"player.isAI\" class=\"text-xs\">🤖</span>\r\n                      <span *ngIf=\"getCurrentPlayerTurnStatus(player.id) === 'active-turn'\" class=\"text-green-400 text-sm\">✓</span>\r\n                    </div>\r\n                    <div class=\"text-sm text-casino-silver/60\">\r\n                      Score: {{ player.score }}\r\n                      <span *ngIf=\"player.isAI\"> | {{ player.difficulty }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"text-sm\">\r\n                  <span \r\n                    *ngIf=\"player.isConnected\" \r\n                    class=\"text-green-400\">●</span>\r\n                  <span \r\n                    *ngIf=\"!player.isConnected\" \r\n                    class=\"text-red-400\">●</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Chat -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Chat</h3>\r\n            <div class=\"space-y-2 max-h-40 overflow-y-auto mb-4\">\r\n              <div \r\n                *ngFor=\"let message of chatMessages\" \r\n                class=\"text-sm\">\r\n                <span class=\"text-casino-gold font-medium\">{{ message.playerName }}:</span>\r\n                <span class=\"text-casino-silver ml-1\">{{ message.text }}</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <form (ngSubmit)=\"sendChatMessage()\" class=\"flex gap-2\">\r\n              <input \r\n                [(ngModel)]=\"chatInput\"\r\n                name=\"chatInput\"\r\n                type=\"text\" \r\n                class=\"casino-input flex-1 text-sm\"\r\n                placeholder=\"Type a message...\"\r\n                maxlength=\"100\">\r\n              <button \r\n                type=\"submit\"\r\n                [disabled]=\"!chatInput.trim()\"\r\n                class=\"bg-casino-gold text-casino-black px-3 py-1 rounded text-sm hover:bg-casino-bronze transition-colors\">\r\n                Send\r\n              </button>\r\n            </form>\r\n          </div>\r\n\r\n          <!-- Room Settings -->\r\n          <div class=\"casino-panel\">\r\n            <h3 class=\"text-lg font-bold text-casino-gold mb-4\">Settings</h3>\r\n            <div class=\"space-y-2 text-sm\">\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Max Players:</span>\r\n                <span class=\"text-casino-gold\">{{ maxPlayers }}</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Game Variant:</span>\r\n                <span class=\"text-casino-gold\">{{ gameVariant }}</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Turn Limit:</span>\r\n                <span class=\"text-casino-gold\">{{ turnTimeLimit }}s</span>\r\n              </div>\r\n              <div class=\"flex justify-between\">\r\n                <span class=\"text-casino-silver\">Point Limit:</span>\r\n                <span class=\"text-casino-gold\">{{ pointLimit }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .card-style {\r\n      background: white;\r\n      border-radius: 8px;\r\n      position: relative;\r\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n      overflow: hidden;\r\n    }\r\n    \r\n    .card-rank {\r\n      position: absolute;\r\n      top: 6px;\r\n      left: 6px;\r\n      font-weight: bold;\r\n      font-size: 0.875rem;\r\n      line-height: 1;\r\n    }\r\n    \r\n    .card-suit {\r\n      position: absolute;\r\n      bottom: 6px;\r\n      right: 6px;\r\n      font-weight: bold;\r\n      font-size: 1.125rem;\r\n      line-height: 1;\r\n    }\r\n    \r\n    .card-red {\r\n      color: #dc2626;\r\n      border: 2px solid #dc2626;\r\n      box-shadow: inset 0 0 0 1px #dc2626;\r\n    }\r\n    \r\n    .card-black {\r\n      color: #1f2937;\r\n      border: 2px solid #1f2937;\r\n      box-shadow: inset 0 0 0 1px #1f2937;\r\n    }\r\n    \r\n    .hand-card {\r\n      width: 3rem;\r\n      height: 4rem;\r\n    }\r\n    \r\n    .discard-card {\r\n      width: 4rem;\r\n      height: 6rem;\r\n    }\r\n    \r\n    .discard-card .card-rank {\r\n      font-size: 1rem;\r\n      top: 8px;\r\n      left: 8px;\r\n    }\r\n    \r\n    .discard-card .card-suit {\r\n      font-size: 1.25rem;\r\n      bottom: 8px;\r\n      right: 8px;\r\n    }\r\n\r\n    .player-circle {\r\n      width: 60px;\r\n      height: 60px;\r\n      border-radius: 50%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-weight: bold;\r\n      font-size: 0.875rem;\r\n      color: white;\r\n      position: relative;\r\n      border: 3px solid rgba(255, 255, 255, 0.3);\r\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\r\n    }\r\n\r\n    .player-circle.active-turn::after {\r\n      content: '✓';\r\n      position: absolute;\r\n      bottom: -8px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      background: #10b981;\r\n      color: white;\r\n      border-radius: 50%;\r\n      width: 18px;\r\n      height: 18px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-size: 12px;\r\n      font-weight: bold;\r\n      border: 2px solid white;\r\n    }\r\n\r\n    .table-container {\r\n      position: relative;\r\n      width: 100%;\r\n      max-width: 600px;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .players-around-table {\r\n      position: relative;\r\n      width: 100%;\r\n      height: 400px;\r\n    }\r\n\r\n    .player-position {\r\n      position: absolute;\r\n    }\r\n\r\n    .player-top {\r\n      top: 10px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n    }\r\n\r\n    .player-top-right {\r\n      top: 30px;\r\n      right: 30px;\r\n    }\r\n\r\n    .player-right {\r\n      top: 50%;\r\n      right: 10px;\r\n      transform: translateY(-50%);\r\n    }\r\n\r\n    .player-bottom-right {\r\n      bottom: 30px;\r\n      right: 30px;\r\n    }\r\n\r\n    .player-bottom {\r\n      bottom: 10px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n    }\r\n\r\n    .player-bottom-left {\r\n      bottom: 30px;\r\n      left: 30px;\r\n    }\r\n\r\n    .player-left {\r\n      top: 50%;\r\n      left: 10px;\r\n      transform: translateY(-50%);\r\n    }\r\n\r\n    .player-top-left {\r\n      top: 30px;\r\n      left: 30px;\r\n    }\r\n\r\n    .game-table {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      width: 300px;\r\n      height: 200px;\r\n      background: linear-gradient(135deg, #0f5132, #198754);\r\n      border-radius: 100px;\r\n      border: 4px solid #ffd700;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.3), 0 4px 16px rgba(0, 0, 0, 0.3);\r\n    }\r\n  `]\r\n})\r\nexport class GameRoomComponent implements OnInit, OnDestroy {\r\n  roomCode = '';\r\n  roomName = 'Cosmic Game Room';\r\n  gamePhase: 'waiting' | 'playing' | 'finished' = 'waiting';\r\n  isReconnecting = false;\r\n  \r\n  // Real game data\r\n  currentRoom: GameRoom | null = null;\r\n  players: Player[] = [];\r\n  \r\n  // Game state\r\n  myCards: Card[] = [];\r\n  opponentCards: number = 0;\r\n  discardPile: Card[] = [];\r\n  deckCount: number = 0;\r\n  \r\n  // Subscriptions\r\n  private subscriptions: Subscription[] = [];\r\n  \r\n  playerSlots: any[] = [];\r\n  currentPlayerId = '';\r\n  currentPlayerName = '';\r\n  hostId = '';\r\n  isHost = false;\r\n  isPlayerReady = false;\r\n  canStartGame = false;\r\n  myPlayerId = ''; // Track which player this client represents  \r\n  myPlayerName = ''; // Track this client's player name\r\n\r\n  // Player color themes for visual differentiation - now synchronized with board icons\r\n  private playerColors = [\r\n    { frame: 'border-red-500 bg-red-500/10', name: 'text-red-400', bgColor: 'hsl(0, 65%, 50%)' },      // Red\r\n    { frame: 'border-orange-500 bg-orange-500/10', name: 'text-orange-400', bgColor: 'hsl(30, 65%, 50%)' }, // Orange  \r\n    { frame: 'border-yellow-500 bg-yellow-500/10', name: 'text-yellow-400', bgColor: 'hsl(60, 65%, 50%)' }, // Yellow\r\n    { frame: 'border-green-500 bg-green-500/10', name: 'text-green-400', bgColor: 'hsl(120, 65%, 50%)' },   // Green\r\n    { frame: 'border-cyan-500 bg-cyan-500/10', name: 'text-cyan-400', bgColor: 'hsl(180, 65%, 50%)' },     // Cyan\r\n    { frame: 'border-blue-500 bg-blue-500/10', name: 'text-blue-400', bgColor: 'hsl(240, 65%, 50%)' },     // Blue\r\n    { frame: 'border-purple-500 bg-purple-500/10', name: 'text-purple-400', bgColor: 'hsl(270, 65%, 50%)' }, // Purple\r\n    { frame: 'border-pink-500 bg-pink-500/10', name: 'text-pink-400', bgColor: 'hsl(300, 65%, 50%)' }       // Magenta\r\n  ];\r\n\r\n  // Room settings\r\n  maxPlayers = 6;\r\n  gameVariant = 'classic';\r\n  turnTimeLimit = 30;\r\n  pointLimit = 100;\r\n\r\n  // Chat\r\n  chatMessages: { playerName: string; text: string; timestamp: Date }[] = [];\r\n  chatInput = '';\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private gameApiService: GameApiService,\r\n    private socketService: SocketService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.roomCode = this.route.snapshot.params['code'];\r\n    console.log('Joining room:', this.roomCode);\r\n    \r\n    // Check if this is a reconnection\r\n    const storedRoomCode = localStorage.getItem('activeRoomCode');\r\n    this.isReconnecting = storedRoomCode === this.roomCode;\r\n    \r\n    if (this.isReconnecting) {\r\n      console.log('🔄 Reconnecting to existing session...');\r\n    }\r\n    \r\n    // Get player name from localStorage (should be set when joining/creating room)\r\n    this.myPlayerName = localStorage.getItem('currentPlayerName') || 'Player';\r\n    \r\n    // Connect to WebSocket\r\n    this.socketService.connect();\r\n    \r\n    // Subscribe to real-time updates\r\n    this.setupSocketSubscriptions();\r\n    \r\n    // Join the room via socket (important for session tracking)\r\n    this.socketService.joinRoom(this.roomCode, this.myPlayerName);\r\n    \r\n    // Load room data\r\n    this.loadRoomData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Cleanup subscriptions\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n    \r\n    // Leave room and disconnect socket\r\n    if (this.roomCode) {\r\n      this.socketService.leaveRoom(this.roomCode);\r\n    }\r\n    this.socketService.disconnect();\r\n    \r\n    // Don't clear session here as user might want to rejoin\r\n    // Session will be cleared when they start a new game or manually clear it\r\n  }\r\n\r\n  private setupSocketSubscriptions(): void {\r\n    // Room updates\r\n    this.subscriptions.push(\r\n      this.socketService.roomUpdated$.subscribe(room => {\r\n        if (room) {\r\n          this.updateRoomData(room);\r\n          this.updateSessionActivity(); // Keep session fresh\r\n        }\r\n      })\r\n    );\r\n\r\n    // Game updates\r\n    this.subscriptions.push(\r\n      this.socketService.gameUpdated$.subscribe(gameState => {\r\n        if (gameState && this.currentRoom) {\r\n          this.currentRoom.gameState = gameState;\r\n          this.gamePhase = gameState.phase;\r\n        }\r\n      })\r\n    );\r\n\r\n    // Player joined\r\n    this.subscriptions.push(\r\n      this.socketService.playerJoined$.subscribe(player => {\r\n        if (player && this.currentRoom) {\r\n          // Player already added via room update, just show notification\r\n          this.addChatMessage('System', `${player.name} joined the room`);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Player left\r\n    this.subscriptions.push(\r\n      this.socketService.playerLeft$.subscribe(playerId => {\r\n        if (playerId && this.currentRoom) {\r\n          const player = this.currentRoom.players.find(p => p.id === playerId);\r\n          if (player) {\r\n            this.addChatMessage('System', `${player.name} left the room`);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    // Chat messages\r\n    this.subscriptions.push(\r\n      this.socketService.chatReceived$.subscribe(chat => {\r\n        if (chat) {\r\n          this.addChatMessage(chat.playerName, chat.message);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Errors\r\n    this.subscriptions.push(\r\n      this.socketService.error$.subscribe(error => {\r\n        if (error) {\r\n          console.error('Socket error:', error);\r\n          this.addChatMessage('System', `Error: ${error}`);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Game started\r\n    this.subscriptions.push(\r\n      this.socketService.gameStarted$.subscribe(started => {\r\n        if (started) {\r\n          this.gamePhase = 'playing';\r\n          this.addChatMessage('System', 'Game started!');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private loadRoomData(): void {\r\n    this.gameApiService.getRoom(this.roomCode).subscribe({\r\n      next: (response) => {\r\n        if (response.success && response.data) {\r\n          this.updateRoomData(response.data);\r\n        } else {\r\n          console.error('Failed to load room:', response.error);\r\n          this.router.navigate(['/']);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading room:', error);\r\n        this.router.navigate(['/']);\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateRoomData(room: GameRoom): void {\r\n    this.currentRoom = room;\r\n    this.roomName = room.name;\r\n    this.players = room.players;\r\n    this.hostId = room.hostId;\r\n    this.gamePhase = room.gameState.phase;\r\n    this.maxPlayers = room.settings.maxPlayers;\r\n    this.gameVariant = room.settings.gameVariant as string;\r\n    this.turnTimeLimit = room.settings.turnTimeLimit;\r\n    this.pointLimit = room.settings.pointLimit;\r\n    \r\n    // Find current player by name\r\n    const myPlayer = this.players.find(p => p.name === this.myPlayerName);\r\n    if (myPlayer) {\r\n      this.myPlayerId = myPlayer.id;\r\n      this.isPlayerReady = myPlayer.isReady;\r\n    }\r\n    \r\n    // Update player slots\r\n    this.playerSlots = Array(this.maxPlayers).fill(null).map((_, i) => ({\r\n      index: i,\r\n      player: i < this.players.length ? this.players[i] : null\r\n    }));\r\n\r\n    // Determine if current user is host\r\n    this.isHost = this.hostId === this.myPlayerId;\r\n    \r\n    // Check if can start game\r\n    this.canStartGame = this.isHost && \r\n                       this.players.length >= 2 && \r\n                       this.players.every(p => p.isReady) &&\r\n                       this.gamePhase === 'waiting';\r\n\r\n    // Update current player info for game state\r\n    if (room.gameState.currentPlayer) {\r\n      const currentPlayer = this.players.find(p => p.id === room.gameState.currentPlayer);\r\n      this.currentPlayerName = currentPlayer?.name || '';\r\n    }\r\n    \r\n    // Update game data for display\r\n    if (this.gamePhase === 'playing') {\r\n      // Get my cards\r\n      const myPlayer = this.players.find(p => p.id === this.myPlayerId);\r\n      this.myCards = myPlayer?.cards || [];\r\n      \r\n      // Count opponent cards (for display purposes)\r\n      const opponents = this.players.filter(p => p.id !== this.myPlayerId);\r\n      this.opponentCards = opponents.length > 0 ? opponents[0].cards.length : 0;\r\n      \r\n      // Game state data\r\n      this.discardPile = room.gameState.discardPile || [];\r\n      this.deckCount = room.gameState.deck?.length || 0;\r\n    }\r\n    \r\n    console.log('Room updated. My player:', { id: this.myPlayerId, name: this.myPlayerName, ready: this.isPlayerReady });\r\n  }\r\n\r\n  private addChatMessage(playerName: string, text: string): void {\r\n    this.chatMessages.push({\r\n      playerName,\r\n      text,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get color theme for a player based on their index\r\n   */\r\n  getPlayerColorTheme(playerIndex: number) {\r\n    return this.playerColors[playerIndex % this.playerColors.length];\r\n  }\r\n\r\n  /**\r\n   * Get frame class for a player slot\r\n   */\r\n  getPlayerFrameClass(slot: any): string {\r\n    if (!slot.player) return '';\r\n    const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\r\n    const theme = this.getPlayerColorTheme(playerIndex);\r\n    return theme.frame;\r\n  }\r\n\r\n  /**\r\n   * Get name class for a player slot\r\n   */\r\n  getPlayerNameClass(slot: any): string {\r\n    if (!slot.player) return 'text-casino-gold';\r\n    const playerIndex = this.players.findIndex(p => p.id === slot.player.id);\r\n    const theme = this.getPlayerColorTheme(playerIndex);\r\n    return theme.name;\r\n  }\r\n\r\n  toggleReady() {\r\n    // Don't optimistically update - wait for server confirmation\r\n    this.socketService.togglePlayerReady(this.roomCode);\r\n    console.log('Requesting ready status toggle...');\r\n  }\r\n\r\n  startGame() {\r\n    if (!this.canStartGame) return;\r\n    \r\n    this.socketService.startGame(this.roomCode);\r\n    console.log('Starting game...');\r\n  }\r\n\r\n  sendChatMessage() {\r\n    if (!this.chatInput.trim()) return;\r\n\r\n    this.socketService.sendChatMessage(this.roomCode, this.chatInput.trim());\r\n    this.chatInput = '';\r\n  }\r\n\r\n  leaveRoom() {\r\n    if (confirm('Are you sure you want to leave the room?')) {\r\n      console.log('🚪 Leaving room:', this.roomCode);\r\n      \r\n      // Clear session data when leaving\r\n      localStorage.removeItem('activeRoomCode');\r\n      localStorage.removeItem('sessionTimestamp');\r\n      localStorage.removeItem('sessionIsAIOnly');\r\n      localStorage.removeItem('currentPlayerName');\r\n      console.log('🧹 Session data cleared');\r\n      \r\n      try {\r\n        // Leave room via socket\r\n        this.socketService.leaveRoom(this.roomCode);\r\n        console.log('📡 Socket leave room called');\r\n        \r\n        // Navigate back to home\r\n        this.router.navigate(['/']);\r\n        console.log('🏠 Navigation to home initiated');\r\n      } catch (error) {\r\n        console.error('❌ Error leaving room:', error);\r\n        // Still try to navigate home even if socket fails\r\n        this.router.navigate(['/']);\r\n      }\r\n    } else {\r\n      console.log('🚫 Leave room cancelled by user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get display string for a card\r\n   */\r\n  getCardDisplay(card: Card): string {\r\n    if (!card) return '';\r\n    \r\n    // Card suit symbols\r\n    const suitSymbols: { [key: string]: string } = {\r\n      'hearts': '♥',\r\n      'diamonds': '♦',\r\n      'clubs': '♣',\r\n      'spades': '♠'\r\n    };\r\n    \r\n    const suit = suitSymbols[card.suit] || card.suit;\r\n    \r\n    return `${card.rank}${suit}`;\r\n  }\r\n\r\n  getCardRank(card: Card): string {\r\n    return card?.rank || '';\r\n  }\r\n\r\n  getCardSuit(card: Card): string {\r\n    const suitSymbols: { [key: string]: string } = {\r\n      'hearts': '♥',\r\n      'diamonds': '♦',\r\n      'clubs': '♣',\r\n      'spades': '♠'\r\n    };\r\n    \r\n    return suitSymbols[card?.suit] || card?.suit || '';\r\n  }\r\n\r\n  getCardColor(card: Card): string {\r\n    if (!card) return 'black';\r\n    return (card.suit === 'hearts' || card.suit === 'diamonds') ? 'red' : 'black';\r\n  }\r\n\r\n  private updateSessionActivity(): void {\r\n    // Update session timestamp to keep it fresh\r\n    const currentRoomCode = localStorage.getItem('activeRoomCode');\r\n    if (currentRoomCode === this.roomCode) {\r\n      localStorage.setItem('sessionTimestamp', Date.now().toString());\r\n      \r\n      // Store room composition info for smarter timeout calculation\r\n      if (this.currentRoom) {\r\n        const humanPlayers = this.currentRoom.players.filter(p => !p.isAI);\r\n        const isAIOnly = humanPlayers.length <= 1; // Only this player or less\r\n        localStorage.setItem('sessionIsAIOnly', isAIOnly.toString());\r\n      }\r\n    }\r\n  }\r\n\r\n  generatePlayerInitials(name: string, allPlayers: any[]): string {\r\n    // Get all other player names for collision detection\r\n    const otherNames = allPlayers.filter(p => p.name !== name).map(p => p.name);\r\n    \r\n    // Start with first character\r\n    let initials = name.charAt(0).toUpperCase();\r\n    \r\n    // Check if any other player starts with the same character\r\n    const sameFirstChar = otherNames.some(otherName => \r\n      otherName.charAt(0).toUpperCase() === initials\r\n    );\r\n    \r\n    // If collision, add second character\r\n    if (sameFirstChar && name.length > 1) {\r\n      initials += name.charAt(1).toUpperCase();\r\n    }\r\n    \r\n    return initials;\r\n  }\r\n\r\n  getPlayerPositionClass(index: number, totalPlayers: number): string {\r\n    const positions = [\r\n      'player-bottom',     // Current player always at bottom\r\n      'player-top',        // Second player at top\r\n      'player-right',      // Third player at right\r\n      'player-left',       // Fourth player at left\r\n      'player-top-right',  // Fifth player at top-right\r\n      'player-top-left',   // Sixth player at top-left\r\n      'player-bottom-right', // Seventh player at bottom-right\r\n      'player-bottom-left'   // Eighth player at bottom-left\r\n    ];\r\n    \r\n    return positions[index] || 'player-top';\r\n  }\r\n\r\n  getPlayerBackgroundColor(playerName: string, playerIndex?: number): string {\r\n    if (playerIndex !== undefined) {\r\n      // Use consistent colors based on player index for synchronization\r\n      const hues = [0, 30, 60, 120, 180, 240, 270, 300]; // Red, Orange, Yellow, Green, Cyan, Blue, Purple, Magenta\r\n      const hue = hues[playerIndex % hues.length];\r\n      return `hsl(${hue}, 65%, 50%)`;\r\n    }\r\n    \r\n    // Fallback to name-based hash (for backward compatibility)\r\n    let hash = 0;\r\n    for (let i = 0; i < playerName.length; i++) {\r\n      hash = playerName.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    \r\n    // Create HSL color with good saturation and lightness for visibility\r\n    const hue = Math.abs(hash) % 360;\r\n    return `hsl(${hue}, 65%, 50%)`;\r\n  }\r\n\r\n  getCurrentPlayerTurnStatus(playerId: string): string {\r\n    // Check if it's this player's turn based on the current game state\r\n    if (this.currentRoom && this.currentRoom.gameState.currentPlayer === playerId) {\r\n      return 'active-turn';\r\n    }\r\n    return '';\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}